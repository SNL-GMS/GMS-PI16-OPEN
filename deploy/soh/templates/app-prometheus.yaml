{{- $appName := "prometheus" }}
{{- $appValues := get .Values $appName }}
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: prometheus
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups: [""]
  resources:
  - nodes
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: prometheus
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: {{ .Release.Namespace }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  labels:
    name: prometheus-config
  namespace: {{ .Release.Namespace }}
data:
  prometheus.rules: |-
    groups:
    - name: devopscube demo alert
      rules:
      - alert: High Pod Memory
        expr: sum(container_memory_usage_bytes) > 1
        for: 1m
        labels:
          severity: slack
        annotations:
          summary: High Memory Usage
  prometheus.yml: |-
    global:
      scrape_interval: 15s
      # Attach these labels to any time series or alerts when communicating with
      # external systems (federation, remote storage, Alertmanager).
      external_labels:
        monitor: 'codelab-monitor'
    scrape_configs:
      - job_name: 'prometheus'
        scrape_interval: 5s
        static_configs:
        # Hard-code the list of metrics endpoints to scape so that we don't
        # accidentally try to scrape the CD 1.1 ports on dataman.
        - targets:
          - 'etcd:2379'
          - 'frameworks-osd-service:8383'
          - 'postgresql-exporter:9187'
          - 'prometheus:9090'
      #- job_name: 'kubernetes-apiservers'
      #  kubernetes_sd_configs:
      #  - role: endpoints
      #    namespaces:
      #      names:
      #        - {{ .Release.Namespace }}
      #  relabel_configs:
      #  - action: labelmap
      #    regex: __meta_kubernetes_service_label_(.+)
      #  - source_labels: [__meta_kubernetes_namespace]
      #    action: replace
      #    target_label: kubernetes_namespace
      #  - source_labels: [__meta_kubernetes_service_name]
      #    action: replace
      #    target_label: kubernetes_name
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ $appName }}
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.storageClassName }}
  resources:
    requests:
      storage: {{ $appValues.storageSize }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $appName }}
  labels:
    restartAfterReconfig: {{ include "soh.deployment.restartAfterReconfig" (dict "Values" .Values "appValues" $appValues) }}
spec:
  replicas: {{ $appValues.replicas }}
  strategy:
    type: {{ include "soh.deployment.strategy" (dict "Values" .Values "appValues" $appValues) }}
  selector:
    matchLabels:
      app: {{ $appName }}
  template:
    metadata:
      labels:
        app: {{ $appName }}
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
        - name: {{ $appName }}
          image: {{ include "soh.container.image" (dict "Values" .Values "appValues" $appValues) }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env: 
            {{- include "soh.app.deployment.env" (dict "appName" $appName "appEnv" $appValues.env "globalEnv" .Values.env "context" $) }}
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: config-volume
              mountPath: /etc/prometheus/prometheus.yml
              subPath: prometheus.yml
            - name: ephemetheus-volume
              mountPath: /prometheus
        - name: prometheus-sidecar
          image: {{ include "soh.container.image" (dict "Values" .Values "appValues" (dict "imageName" "gms-common/prometheus-sidecar")) }}
          lifecycle:
            preStop:
              exec:
                command: ["/unregister.sh"]
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env: 
            {{- include "soh.app.deployment.env" (dict "appName" $appName "appEnv" $appValues.env "globalEnv" .Values.env "context" $) }}
      serviceAccountName: prometheus
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-config
        - name: ephemetheus-volume
          persistentVolumeClaim:
            claimName: {{ $appName }}
          {{- include "soh.container.resources" (dict "Values" .Values "appValues" $appValues) | nindent 10 }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $appName }}
spec:
  type: ClusterIP
  ports:
    - name: http-client
      port: 9090
      protocol: TCP
      targetPort: 9090
  selector:
    app: {{ $appName }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ $appName }}
spec:
  tls:
    - secretName: ingress-default-cert
      hosts:
        - "{{ .Release.Name }}.{{ .Values.baseDomain }}"
  rules:
    - host: "{{ .Release.Name }}.{{ .Values.baseDomain }}"
      http:
        paths:
          - path: "/{{ $appName }}"
            pathType: Prefix
            backend:
              service:
                name: {{ $appName }}
                port:
                  number: 9090
