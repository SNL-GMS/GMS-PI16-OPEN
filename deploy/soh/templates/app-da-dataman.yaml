{{- $appName := "da-dataman" }}
{{- $appValues := get .Values $appName }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ $appName }}
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.storageClassName }}
  resources:
    requests:
      storage: {{ $appValues.storageSize }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $appName }}
  labels:
    restartAfterReconfig: {{ include "soh.deployment.restartAfterReconfig" (dict "Values" .Values "appValues" $appValues) }}
spec:
  replicas: {{ $appValues.replicas }}
  strategy:
    type: {{ include "soh.deployment.strategy" (dict "Values" .Values "appValues" $appValues) }}
  selector:
    matchLabels:
      app: {{ $appName }}
  template:
    metadata:
      labels:
        app: {{ $appName }}
    spec:
      serviceAccount: gms-soh-elevated
      volumes:
        - name: cd11
          persistentVolumeClaim:
            claimName: "{{ $appName }}"
{{- if .Values.liveData }}
      nodeSelector:
        liveData: cd11
{{- end }}
      initContainers:
        {{- include "soh.container.initContainer.wait-for-config-load" (dict "Values" .Values "appValues" $appValues) | nindent 8 }}
      containers:
        - name: {{ $appName }}
          image: {{ include "soh.container.image" (dict "Values" .Values "appValues" $appValues) }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
            - name: ETCD_GMS_USER
              valueFrom:
                secretKeyRef:
                  name: "etcd-gms-user"
                  key:  username
            - name: ETCD_GMS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "etcd-gms-user"
                  key: password
            - name: GMS_CONFIG_SQL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "postgres-soh-application"
                  key: username
            - name: GMS_CONFIG_SQL_PASSWORD 
              valueFrom:
                secretKeyRef:
                  name: "postgres-soh-application"
                  key: password
            {{- include "soh.app.deployment.env" (dict "appName" $appName "appEnv" $appValues.env "globalEnv" .Values.env "context" $) }}
          ports:
            - containerPort: 8080
{{- range (untilStep (int $appValues.dataPortStart) (int (add $appValues.dataPortEnd 1)) 1) }}
            - containerPort: {{ . }}
{{- if $.Values.liveData }}
              hostPort: {{ . }}
{{- end }}
{{- end }}
          volumeMounts:
            - name: cd11
              mountPath: /data-receiver/shared-volume
          {{- include "soh.container.resources" (dict "Values" .Values "appValues" $appValues) | nindent 10 }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $appName }}
spec:
  type: ClusterIP
  ports:
    - name: http-web
      port: 8080
      protocol: TCP
      targetPort: 8080
{{- if .Values.injector }}
{{- range (untilStep (int $appValues.dataPortStart) (int (add $appValues.dataPortEnd 1)) 1) }}
    - name: cd11-{{ . }}
      port: {{ . }}
      protocol: TCP
      targetPort: {{ . }}
{{- end }}
{{- end }}
  selector:
    app: {{ $appName }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ $appName }}
spec:
  tls:
    - secretName: ingress-default-cert
      hosts:
        - "{{ .Release.Name }}.{{ .Values.baseDomain }}"
  rules:
    - host: "{{ .Release.Name }}.{{ .Values.baseDomain }}"
      http:
        paths:
          - path: "/{{ $appName }}"
            pathType: Prefix
            backend:
              service:
                name: {{ $appName }}
                port:
                  number: 8080
