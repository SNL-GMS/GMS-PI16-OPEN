# imageRegistry is the Docker image registry URL where all images will be retrieved.
#imageRegistry: docker-registry.example.com

# baseDomain specifies the domain name suffix applied to all Ingress hostnames.
#baseDomain: cluster.example.com

# imageTag is the Docker image tag used when retrieving all CI-built images.
imageTag: develop

# imagePullPolicy is the policy used for all images ('Always', 'IfNotPresent', 'Never').
imagePullPolicy: Always

# If injector is true, the cd11-injector app will be added.  If not, it will be removed.
injector: false

# If liveData is true, the da-connman and da-dataman apps will use hostPorts to listen for external live data.
liveData: false

# user specifies the username of the user installing or upgrading the instance.
#user: UNKNOWN

# env specifies environment variables that will be added to all applications.
env: {}

# global constraint flags
globalConstrainCpu: false
globalConstrainMemory: false

# default resource limits
cpu_default: 2
cpu_min: "100m"
cpu_max: 4
cpu_request: "100m"
memory_default: "1Gi"
memory_request: "256Mi"

# Default PersistentVolumeClaim storage class.
# Note that kafka's storageClass is configured independently below in the kafka section.
storageClassName: "local-path"

#
# App definitions
#

acei-merge-processor:
  imageName: "gms-common/acei-merge-processor"
  replicas: 2
  restartAfterReconfig: "true"

bastion:
  imageName: "gms-common/bastion"
  replicas: 1

capability-soh-rollup-kafka-consumer:
  imageName: "gms-common/capability-soh-rollup-kafka-consumer"
  replicas: 1

# The cd11-injector will only run if the top-level 'injector' value is true.
cd11-injector:
  imageName: "gms-common/cd11-data-provider"
  replicas: 1
  env:
    GMS_CONFIG_CD11_DATA_PROVIDER__CONSUMER_ID: "{{ .Release.Name }}"
    GMS_CONFIG_CD11_DATA_PROVIDER__REPEATER_SERVERS: "{{ .Values.baseDomain }}:9094,{{ .Values.baseDomain }}:9095,{{ .Values.baseDomain }}:9096"
    GMS_CONFIG_CONNMAN_ADDRESS: "da-connman"
    GMS_CONFIG_CONNMAN_PORT: 8041
    CD11_INJECTOR_CONFIG_NAME: "81for10min"

cd11-rsdf-processor:
  imageName: "gms-common/cd11-rsdf-processor"
  replicas: 1
  restartAfterReconfig: "true"

config-loader:
  imageName: "gms-common/config-loader"
  replicas: 1
  deploymentStrategy: Recreate
  storageSize: "100Mi"

da-connman:
  imageName: "gms-common/cd11-connman"
  replicas: 1
  deploymentStrategy: Recreate
  restartAfterReconfig: "true"
  connPort: 8041
  env:
    GMS_CONFIG_CD11_DATACONSUMER_BASEPORT: '{{ get (get .Values "da-dataman") "dataPortStart" }}'
    GMS_CONFIG_CONNMAN__DATA_MANAGER_IP_ADDRESS: "da-dataman"
    GMS_CONFIG_CONNMAN__CONNECTION_MANAGER_WELL_KNOWN_PORT: '{{ get (get .Values "da-connman") "connPort" }}'

da-dataman:
  imageName: "gms-common/cd11-dataman"
  replicas: 1
  deploymentStrategy: Recreate
  storageSize: "10Gi"
  restartAfterReconfig: "true"
  dataPortStart: 8100
  dataPortEnd: 8449
  env:
    GMS_CONFIG_CD11_DATACONSUMER_BASEPORT: '{{ get (get .Values "da-dataman") "dataPortStart" }}'

etcd:
  imageName: "gms-common/etcd"
  replicas: 1

frameworks-configuration-service:
  imageName: "gms-common/frameworks-configuration-service"
  replicas: 1

frameworks-osd-rsdf-kafka-consumer:
  imageName: "gms-common/frameworks-osd-rsdf-kafka-consumer"
  replicas: 1

frameworks-osd-service:
  imageName: "gms-common/frameworks-osd-service"
  replicas: 1

frameworks-osd-station-soh-kafka-consumer:
  imageName: "gms-common/frameworks-osd-station-soh-kafka-consumer"
  replicas: 1

frameworks-osd-systemmessage-kafka-consumer:
  imageName: "gms-common/frameworks-osd-systemmessage-kafka-consumer"
  replicas: 1

# frameworks-osd-ttl-worker is a CronJob that runs periodically.  It is not a persistent Pod.
frameworks-osd-ttl-worker:
  imageName: "gms-common/frameworks-osd-ttl-worker"
  replicas: 1
  # Run the job every hour on the hour.
  cronSchedule: "0 * * * *"
  env:
    # Note that TTL can only be defined in hours, default to 720 hours (30 days)
    ACEI_TTL_IN_HOURS: "720"
    DATA_SOURCE_HOST: "postgresql-gms"
    RSDF_TTL_IN_HOURS: "720"
    SSOH_TTL_IN_HOURS: "720"

interactive-analysis-api-gateway:
  imageName: "gms-common/interactive-analysis-api-gateway"
  replicas: 1
  restartAfterReconfig: "true"
  env:
    GMS_UI_MODE: "soh"
    NODE_CONFIG_ENV: "deployed"
    NODE_ENV: "production"
    GMS_CONFIG_SQL_HOST: "postgresql-gms"
    GMS_CONFIG_SQL_PORT: "5432"
    GMS_CONFIG_SQL_DB_NAME: "gms"
    APP_NAME: "{{ .appName }}"

interactive-analysis-ui:
  imageName: "gms-common/interactive-analysis-ui"
  replicas: 1
  restartAfterReconfig: "true"
  env:
    GMS_UI_MODE: "soh"
    NODE_ENV: "production"
    GRAPHQL_PROXY_URI: "http://interactive-analysis-api-gateway:3000"
    PROCESSING_CONFIGURATION_PROXY_URI: "http://ui-processing-configuration-service:8080"
    SUBSCRIPTIONS_PROXY_URI: "http://interactive-analysis-api-gateway:4000"
    SYSTEM_MESSAGE_DEFINITION_PROXY_URI: "http://smds-service:8080"
    SSAM_CONTROL_PROXY_URI: "http://ssam-control:8080"
    USER_MANAGER_PROXY_URI: "http://user-manager-service:8080"
    WAVEFORMS_PROXY_URI: "http://interactive-analysis-api-gateway:3000"
    URL_PATH: "{{ .appName }}"

javadoc:
  imageName: "gms-common/javadoc_server"
  replicas: 1

# kafka is a subchart
kafka:
  autoCreateTopicsEnable: true
  defaultReplicationFactor: 3
  fullnameOverride: kafka
  image:
    pullPolicy: Always
    repository: gms-common/bitnami-kafka
  logRetentionHours: 6
  numPartitions: 6
  offsetsTopicReplicationFactor: 3
  persistence:
    storageClass: local-path
  replicaCount: 3
  transactionStateLogMinIsr: 2
  transactionStateLogReplicationFactor: 3
  zookeeper:
    fullnameOverride: zookeeper
    image:
      pullPolicy: Always
      repository: gms-common/bitnami-zookeeper
    persistence:
      storageClass: local-path
    replicaCount: 3

postgresql-exporter:
  imageName: "gms-common/postgres-exporter"
  replicas: 1
  env:
    DATA_SOURCE_URI: "postgresql-gms:5432/gms?sslmode=disable"

postgresql-gms:
  imageName: "gms-common/postgres"
  replicas: 1
  deploymentStrategy: Recreate
  storageSize: "10Gi"
  node: "node1"
  env:
    POSTGRES_DB: "gms"

prometheus:
  imageName: "gms-common/instance-prometheus"
  replicas: 1
  deploymentStrategy: Recreate
  storageSize: "10Gi"
  env:
    G_HOST: "grafana.grafana"
    G_PORT: "80"
    G_ADMIN_PASS:  "someString"
    G_WAIT: "360"
    G_SLEEP: "10m"
    PROM_CONFIG_FILE: "/etc/prometheus/prometheus.yml"
    PROM_NAME: "prometheus.{{ .Release.Name }}"
    PROM_URL: "prometheus.{{ .Release.Name }}"
    PROM_LOG_LEVEL: "info"

smds-service:
  imageName: "gms-common/smds-application"
  replicas: 1
  restartAfterReconfig: "true"
  env:
    # Other valid values are TIMING and SOH_TIMING
    GMS_CONFIG_LOG_LEVEL: "INFO"

soh-control:
  imageName: "gms-common/soh-application"
  replicas: 1
  restartAfterReconfig: "true"
  cpu_request: 1
  cpu_limit: 2
  env:
    # Other valid values are TIMING and SOH_TIMING
    GMS_CONFIG_LOG_LEVEL: "INFO"

soh-quieted-list-kafka-consumer:
  imageName: "gms-common/soh-quieted-list-kafka-consumer"
  replicas: 1

soh-status-change-kafka-consumer:
  imageName: "gms-common/soh-status-change-kafka-consumer"
  replicas: 1

ssam-control:
  imageName: "gms-common/ssam-application"
  replicas: 1
  restartAfterReconfig: "true"
  env:
    # Other valid values are TIMING and SOH_TIMING
    GMS_CONFIG_LOG_LEVEL: "INFO"

swagger:
  imageName: "gms-common/swagger-gms"
  replicas: 1
  env:
    BASE_URL: /swagger

ui-processing-configuration-service:
  imageName: "gms-common/ui-processing-configuration-service"
  replicas: 1
  restartAfterReconfig: "true"

user-manager-service:
  imageName: "gms-common/user-manager-application"
  replicas: 1
