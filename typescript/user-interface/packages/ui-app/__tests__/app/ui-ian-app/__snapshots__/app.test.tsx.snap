// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Root IAN app matches a snapshot 1`] = `
<App
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Provider
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
  >
    <HashRouter>
      <Router
        history={
          Object {
            "action": "REPLACE",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/login",
              "search": "",
              "state": Object {
                "from": "/",
              },
            },
            "push": [Function],
            "replace": [Function],
          }
        }
      >
        <Switch>
          <Route
            computedMatch={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/login",
                "url": "/login",
              }
            }
            location={
              Object {
                "hash": "",
                "pathname": "/login",
                "search": "",
                "state": Object {
                  "from": "/",
                },
              }
            }
            path="/login"
            render={[Function]}
          >
            <Connect(withRouter(LoginScreenComponent))
              authenticator={
                Object {
                  "authenticateWith": [Function],
                  "checkIsAuthenticated": [Function],
                  "logout": [Function],
                  "unAuthenticateWith": [Function],
                }
              }
            >
              <withRouter(LoginScreenComponent)
                authenticated={false}
                authenticationCheckComplete={false}
                authenticator={
                  Object {
                    "authenticateWith": [Function],
                    "checkIsAuthenticated": [Function],
                    "logout": [Function],
                    "unAuthenticateWith": [Function],
                  }
                }
                failedToConnect={false}
                setAuthStatus={[Function]}
              >
                <LoginScreenComponent
                  authenticated={false}
                  authenticationCheckComplete={false}
                  authenticator={
                    Object {
                      "authenticateWith": [Function],
                      "checkIsAuthenticated": [Function],
                      "logout": [Function],
                      "unAuthenticateWith": [Function],
                    }
                  }
                  failedToConnect={false}
                  history={
                    Object {
                      "action": "REPLACE",
                      "block": [Function],
                      "createHref": [Function],
                      "go": [Function],
                      "goBack": [Function],
                      "goForward": [Function],
                      "length": 1,
                      "listen": [Function],
                      "location": Object {
                        "hash": "",
                        "pathname": "/login",
                        "search": "",
                        "state": Object {
                          "from": "/",
                        },
                      },
                      "push": [Function],
                      "replace": [Function],
                    }
                  }
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/login",
                      "search": "",
                      "state": Object {
                        "from": "/",
                      },
                    }
                  }
                  match={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/login",
                      "url": "/login",
                    }
                  }
                  setAuthStatus={[Function]}
                >
                  <Blueprint3.NonIdealState
                    action={
                      <Blueprint3.Spinner
                        intent="primary"
                      />
                    }
                    description="Attempting to login..."
                    title="Checking login"
                  >
                    <div
                      className="bp3-non-ideal-state"
                    >
                      <Component>
                        <h4
                          className="bp3-heading"
                        >
                          Checking login
                        </h4>
                      </Component>
                      <div>
                        Attempting to login...
                      </div>
                      <Blueprint3.Spinner
                        intent="primary"
                      >
                        <div
                          className="bp3-spinner bp3-intent-primary"
                        >
                          <div
                            className="bp3-spinner-animation"
                          >
                            <svg
                              height={50}
                              strokeWidth="8.00"
                              viewBox="1.00 1.00 98.00 98.00"
                              width={50}
                            >
                              <path
                                className="bp3-spinner-track"
                                d="M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90"
                              />
                              <path
                                className="bp3-spinner-head"
                                d="M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90"
                                pathLength={280}
                                strokeDasharray="280 280"
                                strokeDashoffset={210}
                              />
                            </svg>
                          </div>
                        </div>
                      </Blueprint3.Spinner>
                    </div>
                  </Blueprint3.NonIdealState>
                </LoginScreenComponent>
              </withRouter(LoginScreenComponent)>
            </Connect(withRouter(LoginScreenComponent))>
          </Route>
        </Switch>
      </Router>
    </HashRouter>
  </Provider>
</App>
`;
