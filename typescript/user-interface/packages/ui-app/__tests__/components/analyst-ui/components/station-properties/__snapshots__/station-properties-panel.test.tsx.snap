// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`station-properties-panel matches snapshot 1`] = `
<StationPropertiesPanel
  effectiveAtTimes={
    Array [
      "some time",
    ]
  }
  selectedStation="test"
>
  <div
    className="station-properties-panel"
  >
    <StationPropertiesToolbar
      effectiveAtTimes={
        Array [
          "some time",
        ]
      }
      onEffectiveTimeChange={[Function]}
      selectedEffectiveAt="some time"
      selectedStation={
        Object {
          "channelGroups": Array [
            Object {
              "name": "channelGroupName",
            },
          ],
          "name": "test",
          "station": "station",
        }
      }
      setSelectedChannelColumnsToDisplay={[Function]}
      setSelectedSiteColumnsToDisplay={[Function]}
      stationName="test"
    >
      <BaseToolbar
        items={
          Array [
            Object {
              "ianApp": true,
              "label": "Station",
              "rank": 1,
              "tooltip": "Currently Selected Station",
              "type": "LabelValue",
              "value": "test",
              "widthPx": 400,
            },
            Object {
              "ianApp": true,
              "label": "Lat",
              "rank": 2,
              "tooltip": "Station Latitude",
              "type": "LabelValue",
              "value": "Unknown°",
              "widthPx": 400,
            },
            Object {
              "ianApp": true,
              "label": "Lon",
              "rank": 3,
              "tooltip": "Station Longitude",
              "type": "LabelValue",
              "value": "Unknown°",
              "widthPx": 400,
            },
            Object {
              "ianApp": true,
              "label": "Depth",
              "rank": 4,
              "tooltip": "Depth (km)",
              "type": "LabelValue",
              "value": "Unknown",
              "widthPx": 400,
            },
            Object {
              "ianApp": true,
              "label": "Elev",
              "rank": 5,
              "tooltip": "Station Elevation",
              "type": "LabelValue",
              "value": "Unknown",
            },
            Object {
              "ianApp": true,
              "label": "Description",
              "rank": 6,
              "tooltip": "Station Description",
              "type": "LabelValue",
              "value": "Unknown",
              "widthPx": 400,
            },
            Object {
              "ianApp": true,
              "label": "Type",
              "rank": 7,
              "tooltip": "Single Station or Array",
              "type": "LabelValue",
              "value": "Unknown",
              "widthPx": 400,
            },
          ]
        }
        itemsLeft={
          Array [
            Object {
              "displayLabel": true,
              "dropdownOptions": Array [
                "some time",
              ],
              "dropdownText": Array [
                "Unknown",
              ],
              "label": "Effective At",
              "onChange": [Function],
              "rank": 1,
              "tooltip": "Select Effective Time to display",
              "type": "Dropdown",
              "value": "some time",
              "widthPx": 220,
            },
            Object {
              "cyData": "station-properties-channel-group-column-picker",
              "enumKeysToDisplayStrings": Map {
                "name" => "Name",
                "effectiveAt" => "Effective At",
                "effectiveUntil" => "Effective Until",
                "latitudeDegrees" => "Latitude",
                "longitudeDegrees" => "Longitude",
                "depthKm" => "Depth",
                "elevationKm" => "Elevation",
                "description" => "Description",
                "type" => "Type",
              },
              "enumOfKeys": Object {
                "depthKm": "depthKm",
                "description": "description",
                "effectiveAt": "effectiveAt",
                "effectiveUntil": "effectiveUntil",
                "elevationKm": "elevationKm",
                "latitudeDegrees": "latitudeDegrees",
                "longitudeDegrees": "longitudeDegrees",
                "name": "name",
                "type": "type",
              },
              "label": "Channel Group Columns",
              "menuLabel": "Channel Group Columns",
              "onChange": [Function],
              "rank": 2,
              "tooltip": "Select columns to be shown in the channel group table below",
              "type": "CheckboxList",
              "values": Map {
                "name" => true,
                "effectiveAt" => true,
                "effectiveUntil" => true,
                "latitudeDegrees" => true,
                "longitudeDegrees" => true,
                "depthKm" => true,
                "elevationKm" => true,
                "description" => true,
                "type" => true,
              },
              "widthPx": 220,
            },
            Object {
              "cyData": "station-properties-channel-column-picker",
              "enumKeysToDisplayStrings": Map {
                "name" => "Name",
                "effectiveAt" => "Effective At",
                "effectiveUntil" => "Effective Until",
                "latitudeDegrees" => "Latitude",
                "longitudeDegrees" => "Longitude",
                "depthKm" => "Depth",
                "elevationKm" => "Elevation",
                "nominalSampleRateHz" => "Sample Rate",
                "units" => "Units",
                "orientationHorizontalDegrees" => "Horizontal Angle",
                "orientationVerticalDegrees" => "Vertical Angle",
                "calibrationFactor" => "Calibration Factor",
                "calibrationPeriod" => "Calibration Period",
                "calibrationEffectiveAt" => "Calibration Effective At",
                "calibrationTimeShift" => "Calibration Time Shift",
                "calibrationStandardDeviation" => "Calibration Std Dev",
                "northDisplacementKm" => "North Displacement",
                "eastDisplacementKm" => "East Displacement",
                "verticalDisplacementKm" => "Vertical Displacement",
                "description" => "Description",
                "channelDataType" => "Data Type",
                "channelBandType" => "Band Type",
                "channelInstrumentType" => "Instrument Type",
                "channelOrientationCode" => "Orientation Code",
                "channelOrientationType" => "Orientation Type",
                "calibrationResponseId" => "Calibration ID",
                "fapResponseId" => "FAP Resp ID",
              },
              "enumOfKeys": Object {
                "calibrationEffectiveAt": "calibrationEffectiveAt",
                "calibrationFactor": "calibrationFactor",
                "calibrationPeriod": "calibrationPeriod",
                "calibrationResponseId": "calibrationResponseId",
                "calibrationStandardDeviation": "calibrationStandardDeviation",
                "calibrationTimeShift": "calibrationTimeShift",
                "channelBandType": "channelBandType",
                "channelDataType": "channelDataType",
                "channelInstrumentType": "channelInstrumentType",
                "channelOrientationCode": "channelOrientationCode",
                "channelOrientationType": "channelOrientationType",
                "depthKm": "depthKm",
                "description": "description",
                "eastDisplacementKm": "eastDisplacementKm",
                "effectiveAt": "effectiveAt",
                "effectiveUntil": "effectiveUntil",
                "elevationKm": "elevationKm",
                "fapResponseId": "fapResponseId",
                "latitudeDegrees": "latitudeDegrees",
                "longitudeDegrees": "longitudeDegrees",
                "name": "name",
                "nominalSampleRateHz": "nominalSampleRateHz",
                "northDisplacementKm": "northDisplacementKm",
                "orientationHorizontalDegrees": "orientationHorizontalDegrees",
                "orientationVerticalDegrees": "orientationVerticalDegrees",
                "units": "units",
                "verticalDisplacementKm": "verticalDisplacementKm",
              },
              "label": "Channel Columns",
              "menuLabel": "Channel Columns",
              "onChange": [Function],
              "rank": 3,
              "tooltip": "Select columns to be shown in the channel table below",
              "type": "CheckboxList",
              "values": Map {
                "name" => true,
                "effectiveAt" => true,
                "effectiveUntil" => true,
                "latitudeDegrees" => true,
                "longitudeDegrees" => true,
                "depthKm" => true,
                "elevationKm" => true,
                "nominalSampleRateHz" => true,
                "units" => true,
                "orientationHorizontalDegrees" => true,
                "orientationVerticalDegrees" => true,
                "calibrationFactor" => true,
                "calibrationPeriod" => true,
                "calibrationEffectiveAt" => true,
                "calibrationTimeShift" => true,
                "calibrationStandardDeviation" => true,
                "northDisplacementKm" => true,
                "eastDisplacementKm" => true,
                "verticalDisplacementKm" => true,
                "description" => true,
                "channelDataType" => false,
                "channelBandType" => false,
                "channelInstrumentType" => false,
                "channelOrientationCode" => false,
                "channelOrientationType" => false,
                "calibrationResponseId" => true,
                "fapResponseId" => true,
              },
              "widthPx": 220,
            },
          ]
        }
        widthPx={100}
      >
        <ToolbarComponent
          items={
            Array [
              Object {
                "ianApp": true,
                "label": "Station",
                "rank": 1,
                "tooltip": "Currently Selected Station",
                "type": "LabelValue",
                "value": "test",
                "widthPx": 400,
              },
              Object {
                "ianApp": true,
                "label": "Lat",
                "rank": 2,
                "tooltip": "Station Latitude",
                "type": "LabelValue",
                "value": "Unknown°",
                "widthPx": 400,
              },
              Object {
                "ianApp": true,
                "label": "Lon",
                "rank": 3,
                "tooltip": "Station Longitude",
                "type": "LabelValue",
                "value": "Unknown°",
                "widthPx": 400,
              },
              Object {
                "ianApp": true,
                "label": "Depth",
                "rank": 4,
                "tooltip": "Depth (km)",
                "type": "LabelValue",
                "value": "Unknown",
                "widthPx": 400,
              },
              Object {
                "ianApp": true,
                "label": "Elev",
                "rank": 5,
                "tooltip": "Station Elevation",
                "type": "LabelValue",
                "value": "Unknown",
              },
              Object {
                "ianApp": true,
                "label": "Description",
                "rank": 6,
                "tooltip": "Station Description",
                "type": "LabelValue",
                "value": "Unknown",
                "widthPx": 400,
              },
              Object {
                "ianApp": true,
                "label": "Type",
                "rank": 7,
                "tooltip": "Single Station or Array",
                "type": "LabelValue",
                "value": "Unknown",
                "widthPx": 400,
              },
            ]
          }
          itemsLeft={
            Array [
              Object {
                "displayLabel": true,
                "dropdownOptions": Array [
                  "some time",
                ],
                "dropdownText": Array [
                  "Unknown",
                ],
                "label": "Effective At",
                "onChange": [Function],
                "rank": 1,
                "tooltip": "Select Effective Time to display",
                "type": "Dropdown",
                "value": "some time",
                "widthPx": 220,
              },
              Object {
                "cyData": "station-properties-channel-group-column-picker",
                "enumKeysToDisplayStrings": Map {
                  "name" => "Name",
                  "effectiveAt" => "Effective At",
                  "effectiveUntil" => "Effective Until",
                  "latitudeDegrees" => "Latitude",
                  "longitudeDegrees" => "Longitude",
                  "depthKm" => "Depth",
                  "elevationKm" => "Elevation",
                  "description" => "Description",
                  "type" => "Type",
                },
                "enumOfKeys": Object {
                  "depthKm": "depthKm",
                  "description": "description",
                  "effectiveAt": "effectiveAt",
                  "effectiveUntil": "effectiveUntil",
                  "elevationKm": "elevationKm",
                  "latitudeDegrees": "latitudeDegrees",
                  "longitudeDegrees": "longitudeDegrees",
                  "name": "name",
                  "type": "type",
                },
                "label": "Channel Group Columns",
                "menuLabel": "Channel Group Columns",
                "onChange": [Function],
                "rank": 2,
                "tooltip": "Select columns to be shown in the channel group table below",
                "type": "CheckboxList",
                "values": Map {
                  "name" => true,
                  "effectiveAt" => true,
                  "effectiveUntil" => true,
                  "latitudeDegrees" => true,
                  "longitudeDegrees" => true,
                  "depthKm" => true,
                  "elevationKm" => true,
                  "description" => true,
                  "type" => true,
                },
                "widthPx": 220,
              },
              Object {
                "cyData": "station-properties-channel-column-picker",
                "enumKeysToDisplayStrings": Map {
                  "name" => "Name",
                  "effectiveAt" => "Effective At",
                  "effectiveUntil" => "Effective Until",
                  "latitudeDegrees" => "Latitude",
                  "longitudeDegrees" => "Longitude",
                  "depthKm" => "Depth",
                  "elevationKm" => "Elevation",
                  "nominalSampleRateHz" => "Sample Rate",
                  "units" => "Units",
                  "orientationHorizontalDegrees" => "Horizontal Angle",
                  "orientationVerticalDegrees" => "Vertical Angle",
                  "calibrationFactor" => "Calibration Factor",
                  "calibrationPeriod" => "Calibration Period",
                  "calibrationEffectiveAt" => "Calibration Effective At",
                  "calibrationTimeShift" => "Calibration Time Shift",
                  "calibrationStandardDeviation" => "Calibration Std Dev",
                  "northDisplacementKm" => "North Displacement",
                  "eastDisplacementKm" => "East Displacement",
                  "verticalDisplacementKm" => "Vertical Displacement",
                  "description" => "Description",
                  "channelDataType" => "Data Type",
                  "channelBandType" => "Band Type",
                  "channelInstrumentType" => "Instrument Type",
                  "channelOrientationCode" => "Orientation Code",
                  "channelOrientationType" => "Orientation Type",
                  "calibrationResponseId" => "Calibration ID",
                  "fapResponseId" => "FAP Resp ID",
                },
                "enumOfKeys": Object {
                  "calibrationEffectiveAt": "calibrationEffectiveAt",
                  "calibrationFactor": "calibrationFactor",
                  "calibrationPeriod": "calibrationPeriod",
                  "calibrationResponseId": "calibrationResponseId",
                  "calibrationStandardDeviation": "calibrationStandardDeviation",
                  "calibrationTimeShift": "calibrationTimeShift",
                  "channelBandType": "channelBandType",
                  "channelDataType": "channelDataType",
                  "channelInstrumentType": "channelInstrumentType",
                  "channelOrientationCode": "channelOrientationCode",
                  "channelOrientationType": "channelOrientationType",
                  "depthKm": "depthKm",
                  "description": "description",
                  "eastDisplacementKm": "eastDisplacementKm",
                  "effectiveAt": "effectiveAt",
                  "effectiveUntil": "effectiveUntil",
                  "elevationKm": "elevationKm",
                  "fapResponseId": "fapResponseId",
                  "latitudeDegrees": "latitudeDegrees",
                  "longitudeDegrees": "longitudeDegrees",
                  "name": "name",
                  "nominalSampleRateHz": "nominalSampleRateHz",
                  "northDisplacementKm": "northDisplacementKm",
                  "orientationHorizontalDegrees": "orientationHorizontalDegrees",
                  "orientationVerticalDegrees": "orientationVerticalDegrees",
                  "units": "units",
                  "verticalDisplacementKm": "verticalDisplacementKm",
                },
                "label": "Channel Columns",
                "menuLabel": "Channel Columns",
                "onChange": [Function],
                "rank": 3,
                "tooltip": "Select columns to be shown in the channel table below",
                "type": "CheckboxList",
                "values": Map {
                  "name" => true,
                  "effectiveAt" => true,
                  "effectiveUntil" => true,
                  "latitudeDegrees" => true,
                  "longitudeDegrees" => true,
                  "depthKm" => true,
                  "elevationKm" => true,
                  "nominalSampleRateHz" => true,
                  "units" => true,
                  "orientationHorizontalDegrees" => true,
                  "orientationVerticalDegrees" => true,
                  "calibrationFactor" => true,
                  "calibrationPeriod" => true,
                  "calibrationEffectiveAt" => true,
                  "calibrationTimeShift" => true,
                  "calibrationStandardDeviation" => true,
                  "northDisplacementKm" => true,
                  "eastDisplacementKm" => true,
                  "verticalDisplacementKm" => true,
                  "description" => true,
                  "channelDataType" => false,
                  "channelBandType" => false,
                  "channelInstrumentType" => false,
                  "channelOrientationCode" => false,
                  "channelOrientationType" => false,
                  "calibrationResponseId" => true,
                  "fapResponseId" => true,
                },
                "widthPx": 220,
              },
            ]
          }
          minWhiteSpacePx={1}
          toolbarWidthPx={60}
          widthPx={100}
        >
          <div
            className="toolbar"
            style={
              Object {
                "width": "60px",
              }
            }
          >
            <div
              className="toolbar__left-group"
            >
              <div
                className="toolbar-item toolbar-item__left"
                key="1"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "displayLabel": true,
                      "dropdownOptions": Array [
                        "some time",
                      ],
                      "dropdownText": Array [
                        "Unknown",
                      ],
                      "label": "Effective At",
                      "onChange": [Function],
                      "rank": 1,
                      "tooltip": "Select Effective Time to display",
                      "type": "Dropdown",
                      "value": "some time",
                      "widthPx": 220,
                    }
                  }
                  key="1"
                >
                  <div
                    style={Object {}}
                  >
                    <DropDown
                      displayLabel={true}
                      dropDownItems={
                        Array [
                          "some time",
                        ]
                      }
                      dropdownText={
                        Array [
                          "Unknown",
                        ]
                      }
                      key="1"
                      label="Effective At"
                      onMaybeValue={[Function]}
                      title="Select Effective Time to display"
                      value="some time"
                      widthPx={220}
                    >
                      <div
                        className="dropdown-container"
                      >
                        <span
                          className="dropdown-label"
                        >
                          Effective At: 
                        </span>
                        <span
                          className="dropdown-selector"
                        >
                          <HTMLSelect
                            onChange={[Function]}
                            style={
                              Object {
                                "minWidth": "220px",
                                "width": "220px",
                              }
                            }
                            title="Select Effective Time to display"
                            value="some time"
                          >
                            <div
                              className="bp3-html-select"
                            >
                              <select
                                multiple={false}
                                onChange={[Function]}
                                style={
                                  Object {
                                    "minWidth": "220px",
                                    "width": "220px",
                                  }
                                }
                                title="Select Effective Time to display"
                                value="some time"
                              >
                                <option
                                  key="0"
                                  value="some time"
                                >
                                  Unknown
                                </option>
                              </select>
                              <Blueprint3.Icon
                                icon="double-caret-vertical"
                              >
                                <span
                                  className="bp3-icon bp3-icon-double-caret-vertical"
                                  icon="double-caret-vertical"
                                >
                                  <svg
                                    data-icon="double-caret-vertical"
                                    height={16}
                                    viewBox="0 0 16 16"
                                    width={16}
                                  >
                                    <desc>
                                      double-caret-vertical
                                    </desc>
                                    <path
                                      d="M5 7h6a1.003 1.003 0 00.71-1.71l-3-3C8.53 2.11 8.28 2 8 2s-.53.11-.71.29l-3 3A1.003 1.003 0 005 7zm6 2H5a1.003 1.003 0 00-.71 1.71l3 3c.18.18.43.29.71.29s.53-.11.71-.29l3-3A1.003 1.003 0 0011 9z"
                                      fillRule="evenodd"
                                      key="0"
                                    />
                                  </svg>
                                </span>
                              </Blueprint3.Icon>
                            </div>
                          </HTMLSelect>
                        </span>
                      </div>
                    </DropDown>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item toolbar-item__left"
                key="2"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "cyData": "station-properties-channel-group-column-picker",
                      "enumKeysToDisplayStrings": Map {
                        "name" => "Name",
                        "effectiveAt" => "Effective At",
                        "effectiveUntil" => "Effective Until",
                        "latitudeDegrees" => "Latitude",
                        "longitudeDegrees" => "Longitude",
                        "depthKm" => "Depth",
                        "elevationKm" => "Elevation",
                        "description" => "Description",
                        "type" => "Type",
                      },
                      "enumOfKeys": Object {
                        "depthKm": "depthKm",
                        "description": "description",
                        "effectiveAt": "effectiveAt",
                        "effectiveUntil": "effectiveUntil",
                        "elevationKm": "elevationKm",
                        "latitudeDegrees": "latitudeDegrees",
                        "longitudeDegrees": "longitudeDegrees",
                        "name": "name",
                        "type": "type",
                      },
                      "label": "Channel Group Columns",
                      "menuLabel": "Channel Group Columns",
                      "onChange": [Function],
                      "rank": 2,
                      "tooltip": "Select columns to be shown in the channel group table below",
                      "type": "CheckboxList",
                      "values": Map {
                        "name" => true,
                        "effectiveAt" => true,
                        "effectiveUntil" => true,
                        "latitudeDegrees" => true,
                        "longitudeDegrees" => true,
                        "depthKm" => true,
                        "elevationKm" => true,
                        "description" => true,
                        "type" => true,
                      },
                      "widthPx": 220,
                    }
                  }
                  key="2"
                >
                  <div
                    style={Object {}}
                  >
                    <PopoverButtonComponent
                      cyData="station-properties-channel-group-column-picker"
                      key="2"
                      label="Channel Group Columns"
                      onClick={[Function]}
                      onPopoverDismissed={[Function]}
                      popupContent={
                        <CheckboxList
                          checkboxEnum={
                            Object {
                              "depthKm": "depthKm",
                              "description": "description",
                              "effectiveAt": "effectiveAt",
                              "effectiveUntil": "effectiveUntil",
                              "elevationKm": "elevationKm",
                              "latitudeDegrees": "latitudeDegrees",
                              "longitudeDegrees": "longitudeDegrees",
                              "name": "name",
                              "type": "type",
                            }
                          }
                          enumKeysToDisplayStrings={
                            Map {
                              "name" => "Name",
                              "effectiveAt" => "Effective At",
                              "effectiveUntil" => "Effective Until",
                              "latitudeDegrees" => "Latitude",
                              "longitudeDegrees" => "Longitude",
                              "depthKm" => "Depth",
                              "elevationKm" => "Elevation",
                              "description" => "Description",
                              "type" => "Type",
                            }
                          }
                          enumToCheckedMap={
                            Map {
                              "name" => true,
                              "effectiveAt" => true,
                              "effectiveUntil" => true,
                              "latitudeDegrees" => true,
                              "longitudeDegrees" => true,
                              "depthKm" => true,
                              "elevationKm" => true,
                              "description" => true,
                              "type" => true,
                            }
                          }
                          onChange={[Function]}
                        />
                      }
                      tooltip="Select columns to be shown in the channel group table below"
                      widthPx={220}
                    >
                      <div
                        data-cy="station-properties-channel-group-column-picker"
                      >
                        <Blueprint3.Button
                          active={false}
                          alignText="left"
                          className="toolbar-button"
                          onClick={[Function]}
                          style={
                            Object {
                              "width": "220px",
                            }
                          }
                          title="Select columns to be shown in the channel group table below"
                        >
                          <button
                            className="bp3-button bp3-align-left toolbar-button"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            style={
                              Object {
                                "width": "220px",
                              }
                            }
                            title="Select columns to be shown in the channel group table below"
                            type="button"
                          >
                            <Blueprint3.Icon
                              key="leftIcon"
                            />
                            <span
                              className="bp3-button-text"
                              key="text"
                            >
                              <span>
                                Channel Group Columns
                              </span>
                              <Blueprint3.Icon
                                icon="chevron-down"
                                title={false}
                              >
                                <span
                                  className="bp3-icon bp3-icon-chevron-down"
                                  icon="chevron-down"
                                >
                                  <svg
                                    data-icon="chevron-down"
                                    height={16}
                                    viewBox="0 0 16 16"
                                    width={16}
                                  >
                                    <path
                                      d="M12 5c-.28 0-.53.11-.71.29L8 8.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42l4 4c.18.18.43.29.71.29s.53-.11.71-.29l4-4A1.003 1.003 0 0012 5z"
                                      fillRule="evenodd"
                                      key="0"
                                    />
                                  </svg>
                                </span>
                              </Blueprint3.Icon>
                            </span>
                            <Blueprint3.Icon
                              key="rightIcon"
                            />
                          </button>
                        </Blueprint3.Button>
                      </div>
                    </PopoverButtonComponent>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item toolbar-item__left"
                key="3"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "cyData": "station-properties-channel-column-picker",
                      "enumKeysToDisplayStrings": Map {
                        "name" => "Name",
                        "effectiveAt" => "Effective At",
                        "effectiveUntil" => "Effective Until",
                        "latitudeDegrees" => "Latitude",
                        "longitudeDegrees" => "Longitude",
                        "depthKm" => "Depth",
                        "elevationKm" => "Elevation",
                        "nominalSampleRateHz" => "Sample Rate",
                        "units" => "Units",
                        "orientationHorizontalDegrees" => "Horizontal Angle",
                        "orientationVerticalDegrees" => "Vertical Angle",
                        "calibrationFactor" => "Calibration Factor",
                        "calibrationPeriod" => "Calibration Period",
                        "calibrationEffectiveAt" => "Calibration Effective At",
                        "calibrationTimeShift" => "Calibration Time Shift",
                        "calibrationStandardDeviation" => "Calibration Std Dev",
                        "northDisplacementKm" => "North Displacement",
                        "eastDisplacementKm" => "East Displacement",
                        "verticalDisplacementKm" => "Vertical Displacement",
                        "description" => "Description",
                        "channelDataType" => "Data Type",
                        "channelBandType" => "Band Type",
                        "channelInstrumentType" => "Instrument Type",
                        "channelOrientationCode" => "Orientation Code",
                        "channelOrientationType" => "Orientation Type",
                        "calibrationResponseId" => "Calibration ID",
                        "fapResponseId" => "FAP Resp ID",
                      },
                      "enumOfKeys": Object {
                        "calibrationEffectiveAt": "calibrationEffectiveAt",
                        "calibrationFactor": "calibrationFactor",
                        "calibrationPeriod": "calibrationPeriod",
                        "calibrationResponseId": "calibrationResponseId",
                        "calibrationStandardDeviation": "calibrationStandardDeviation",
                        "calibrationTimeShift": "calibrationTimeShift",
                        "channelBandType": "channelBandType",
                        "channelDataType": "channelDataType",
                        "channelInstrumentType": "channelInstrumentType",
                        "channelOrientationCode": "channelOrientationCode",
                        "channelOrientationType": "channelOrientationType",
                        "depthKm": "depthKm",
                        "description": "description",
                        "eastDisplacementKm": "eastDisplacementKm",
                        "effectiveAt": "effectiveAt",
                        "effectiveUntil": "effectiveUntil",
                        "elevationKm": "elevationKm",
                        "fapResponseId": "fapResponseId",
                        "latitudeDegrees": "latitudeDegrees",
                        "longitudeDegrees": "longitudeDegrees",
                        "name": "name",
                        "nominalSampleRateHz": "nominalSampleRateHz",
                        "northDisplacementKm": "northDisplacementKm",
                        "orientationHorizontalDegrees": "orientationHorizontalDegrees",
                        "orientationVerticalDegrees": "orientationVerticalDegrees",
                        "units": "units",
                        "verticalDisplacementKm": "verticalDisplacementKm",
                      },
                      "label": "Channel Columns",
                      "menuLabel": "Channel Columns",
                      "onChange": [Function],
                      "rank": 3,
                      "tooltip": "Select columns to be shown in the channel table below",
                      "type": "CheckboxList",
                      "values": Map {
                        "name" => true,
                        "effectiveAt" => true,
                        "effectiveUntil" => true,
                        "latitudeDegrees" => true,
                        "longitudeDegrees" => true,
                        "depthKm" => true,
                        "elevationKm" => true,
                        "nominalSampleRateHz" => true,
                        "units" => true,
                        "orientationHorizontalDegrees" => true,
                        "orientationVerticalDegrees" => true,
                        "calibrationFactor" => true,
                        "calibrationPeriod" => true,
                        "calibrationEffectiveAt" => true,
                        "calibrationTimeShift" => true,
                        "calibrationStandardDeviation" => true,
                        "northDisplacementKm" => true,
                        "eastDisplacementKm" => true,
                        "verticalDisplacementKm" => true,
                        "description" => true,
                        "channelDataType" => false,
                        "channelBandType" => false,
                        "channelInstrumentType" => false,
                        "channelOrientationCode" => false,
                        "channelOrientationType" => false,
                        "calibrationResponseId" => true,
                        "fapResponseId" => true,
                      },
                      "widthPx": 220,
                    }
                  }
                  key="3"
                >
                  <div
                    style={Object {}}
                  >
                    <PopoverButtonComponent
                      cyData="station-properties-channel-column-picker"
                      key="3"
                      label="Channel Columns"
                      onClick={[Function]}
                      onPopoverDismissed={[Function]}
                      popupContent={
                        <CheckboxList
                          checkboxEnum={
                            Object {
                              "calibrationEffectiveAt": "calibrationEffectiveAt",
                              "calibrationFactor": "calibrationFactor",
                              "calibrationPeriod": "calibrationPeriod",
                              "calibrationResponseId": "calibrationResponseId",
                              "calibrationStandardDeviation": "calibrationStandardDeviation",
                              "calibrationTimeShift": "calibrationTimeShift",
                              "channelBandType": "channelBandType",
                              "channelDataType": "channelDataType",
                              "channelInstrumentType": "channelInstrumentType",
                              "channelOrientationCode": "channelOrientationCode",
                              "channelOrientationType": "channelOrientationType",
                              "depthKm": "depthKm",
                              "description": "description",
                              "eastDisplacementKm": "eastDisplacementKm",
                              "effectiveAt": "effectiveAt",
                              "effectiveUntil": "effectiveUntil",
                              "elevationKm": "elevationKm",
                              "fapResponseId": "fapResponseId",
                              "latitudeDegrees": "latitudeDegrees",
                              "longitudeDegrees": "longitudeDegrees",
                              "name": "name",
                              "nominalSampleRateHz": "nominalSampleRateHz",
                              "northDisplacementKm": "northDisplacementKm",
                              "orientationHorizontalDegrees": "orientationHorizontalDegrees",
                              "orientationVerticalDegrees": "orientationVerticalDegrees",
                              "units": "units",
                              "verticalDisplacementKm": "verticalDisplacementKm",
                            }
                          }
                          enumKeysToDisplayStrings={
                            Map {
                              "name" => "Name",
                              "effectiveAt" => "Effective At",
                              "effectiveUntil" => "Effective Until",
                              "latitudeDegrees" => "Latitude",
                              "longitudeDegrees" => "Longitude",
                              "depthKm" => "Depth",
                              "elevationKm" => "Elevation",
                              "nominalSampleRateHz" => "Sample Rate",
                              "units" => "Units",
                              "orientationHorizontalDegrees" => "Horizontal Angle",
                              "orientationVerticalDegrees" => "Vertical Angle",
                              "calibrationFactor" => "Calibration Factor",
                              "calibrationPeriod" => "Calibration Period",
                              "calibrationEffectiveAt" => "Calibration Effective At",
                              "calibrationTimeShift" => "Calibration Time Shift",
                              "calibrationStandardDeviation" => "Calibration Std Dev",
                              "northDisplacementKm" => "North Displacement",
                              "eastDisplacementKm" => "East Displacement",
                              "verticalDisplacementKm" => "Vertical Displacement",
                              "description" => "Description",
                              "channelDataType" => "Data Type",
                              "channelBandType" => "Band Type",
                              "channelInstrumentType" => "Instrument Type",
                              "channelOrientationCode" => "Orientation Code",
                              "channelOrientationType" => "Orientation Type",
                              "calibrationResponseId" => "Calibration ID",
                              "fapResponseId" => "FAP Resp ID",
                            }
                          }
                          enumToCheckedMap={
                            Map {
                              "name" => true,
                              "effectiveAt" => true,
                              "effectiveUntil" => true,
                              "latitudeDegrees" => true,
                              "longitudeDegrees" => true,
                              "depthKm" => true,
                              "elevationKm" => true,
                              "nominalSampleRateHz" => true,
                              "units" => true,
                              "orientationHorizontalDegrees" => true,
                              "orientationVerticalDegrees" => true,
                              "calibrationFactor" => true,
                              "calibrationPeriod" => true,
                              "calibrationEffectiveAt" => true,
                              "calibrationTimeShift" => true,
                              "calibrationStandardDeviation" => true,
                              "northDisplacementKm" => true,
                              "eastDisplacementKm" => true,
                              "verticalDisplacementKm" => true,
                              "description" => true,
                              "channelDataType" => false,
                              "channelBandType" => false,
                              "channelInstrumentType" => false,
                              "channelOrientationCode" => false,
                              "channelOrientationType" => false,
                              "calibrationResponseId" => true,
                              "fapResponseId" => true,
                            }
                          }
                          onChange={[Function]}
                        />
                      }
                      tooltip="Select columns to be shown in the channel table below"
                      widthPx={220}
                    >
                      <div
                        data-cy="station-properties-channel-column-picker"
                      >
                        <Blueprint3.Button
                          active={false}
                          alignText="left"
                          className="toolbar-button"
                          onClick={[Function]}
                          style={
                            Object {
                              "width": "220px",
                            }
                          }
                          title="Select columns to be shown in the channel table below"
                        >
                          <button
                            className="bp3-button bp3-align-left toolbar-button"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            style={
                              Object {
                                "width": "220px",
                              }
                            }
                            title="Select columns to be shown in the channel table below"
                            type="button"
                          >
                            <Blueprint3.Icon
                              key="leftIcon"
                            />
                            <span
                              className="bp3-button-text"
                              key="text"
                            >
                              <span>
                                Channel Columns
                              </span>
                              <Blueprint3.Icon
                                icon="chevron-down"
                                title={false}
                              >
                                <span
                                  className="bp3-icon bp3-icon-chevron-down"
                                  icon="chevron-down"
                                >
                                  <svg
                                    data-icon="chevron-down"
                                    height={16}
                                    viewBox="0 0 16 16"
                                    width={16}
                                  >
                                    <path
                                      d="M12 5c-.28 0-.53.11-.71.29L8 8.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42l4 4c.18.18.43.29.71.29s.53-.11.71-.29l4-4A1.003 1.003 0 0012 5z"
                                      fillRule="evenodd"
                                      key="0"
                                    />
                                  </svg>
                                </span>
                              </Blueprint3.Icon>
                            </span>
                            <Blueprint3.Icon
                              key="rightIcon"
                            />
                          </button>
                        </Blueprint3.Button>
                      </div>
                    </PopoverButtonComponent>
                  </div>
                </ToolbarItemRenderer>
              </div>
            </div>
            <div
              className="toolbar__center-group"
            >
              <div
                className="toolbar__whitespace"
                style={
                  Object {
                    "width": "44px",
                  }
                }
              />
            </div>
            <div
              className="toolbar__right-group"
            >
              <div
                className="toolbar-item
                    "
                key="1"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "ianApp": true,
                      "label": "Station",
                      "rank": 1,
                      "tooltip": "Currently Selected Station",
                      "type": "LabelValue",
                      "value": "test",
                      "widthPx": 400,
                    }
                  }
                  key="1"
                >
                  <div
                    className="toolbar-label-value"
                    style={Object {}}
                  >
                    <LabelValue
                      ianApp={true}
                      label="Station"
                      tooltip="Currently Selected Station"
                      value="test"
                    >
                      <div
                        className="ian-label-value-container"
                      >
                        <div
                          className="ian-label-value__label"
                        >
                          Station: 
                        </div>
                        <div
                          className="ian-label-value__value"
                          style={
                            Object {
                              "color": "",
                            }
                          }
                          title="Currently Selected Station"
                        >
                          test
                        </div>
                      </div>
                    </LabelValue>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="2"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "ianApp": true,
                      "label": "Lat",
                      "rank": 2,
                      "tooltip": "Station Latitude",
                      "type": "LabelValue",
                      "value": "Unknown°",
                      "widthPx": 400,
                    }
                  }
                  key="2"
                >
                  <div
                    className="toolbar-label-value"
                    style={Object {}}
                  >
                    <LabelValue
                      ianApp={true}
                      label="Lat"
                      tooltip="Station Latitude"
                      value="Unknown°"
                    >
                      <div
                        className="ian-label-value-container"
                      >
                        <div
                          className="ian-label-value__label"
                        >
                          Lat: 
                        </div>
                        <div
                          className="ian-label-value__value"
                          style={
                            Object {
                              "color": "",
                            }
                          }
                          title="Station Latitude"
                        >
                          Unknown°
                        </div>
                      </div>
                    </LabelValue>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="3"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "ianApp": true,
                      "label": "Lon",
                      "rank": 3,
                      "tooltip": "Station Longitude",
                      "type": "LabelValue",
                      "value": "Unknown°",
                      "widthPx": 400,
                    }
                  }
                  key="3"
                >
                  <div
                    className="toolbar-label-value"
                    style={Object {}}
                  >
                    <LabelValue
                      ianApp={true}
                      label="Lon"
                      tooltip="Station Longitude"
                      value="Unknown°"
                    >
                      <div
                        className="ian-label-value-container"
                      >
                        <div
                          className="ian-label-value__label"
                        >
                          Lon: 
                        </div>
                        <div
                          className="ian-label-value__value"
                          style={
                            Object {
                              "color": "",
                            }
                          }
                          title="Station Longitude"
                        >
                          Unknown°
                        </div>
                      </div>
                    </LabelValue>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="4"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "ianApp": true,
                      "label": "Depth",
                      "rank": 4,
                      "tooltip": "Depth (km)",
                      "type": "LabelValue",
                      "value": "Unknown",
                      "widthPx": 400,
                    }
                  }
                  key="4"
                >
                  <div
                    className="toolbar-label-value"
                    style={Object {}}
                  >
                    <LabelValue
                      ianApp={true}
                      label="Depth"
                      tooltip="Depth (km)"
                      value="Unknown"
                    >
                      <div
                        className="ian-label-value-container"
                      >
                        <div
                          className="ian-label-value__label"
                        >
                          Depth: 
                        </div>
                        <div
                          className="ian-label-value__value"
                          style={
                            Object {
                              "color": "",
                            }
                          }
                          title="Depth (km)"
                        >
                          Unknown
                        </div>
                      </div>
                    </LabelValue>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="5"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "ianApp": true,
                      "label": "Elev",
                      "rank": 5,
                      "tooltip": "Station Elevation",
                      "type": "LabelValue",
                      "value": "Unknown",
                    }
                  }
                  key="5"
                >
                  <div
                    className="toolbar-label-value"
                    style={Object {}}
                  >
                    <LabelValue
                      ianApp={true}
                      label="Elev"
                      tooltip="Station Elevation"
                      value="Unknown"
                    >
                      <div
                        className="ian-label-value-container"
                      >
                        <div
                          className="ian-label-value__label"
                        >
                          Elev: 
                        </div>
                        <div
                          className="ian-label-value__value"
                          style={
                            Object {
                              "color": "",
                            }
                          }
                          title="Station Elevation"
                        >
                          Unknown
                        </div>
                      </div>
                    </LabelValue>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="6"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "ianApp": true,
                      "label": "Description",
                      "rank": 6,
                      "tooltip": "Station Description",
                      "type": "LabelValue",
                      "value": "Unknown",
                      "widthPx": 400,
                    }
                  }
                  key="6"
                >
                  <div
                    className="toolbar-label-value"
                    style={Object {}}
                  >
                    <LabelValue
                      ianApp={true}
                      label="Description"
                      tooltip="Station Description"
                      value="Unknown"
                    >
                      <div
                        className="ian-label-value-container"
                      >
                        <div
                          className="ian-label-value__label"
                        >
                          Description: 
                        </div>
                        <div
                          className="ian-label-value__value"
                          style={
                            Object {
                              "color": "",
                            }
                          }
                          title="Station Description"
                        >
                          Unknown
                        </div>
                      </div>
                    </LabelValue>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="7"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "ianApp": true,
                      "label": "Type",
                      "rank": 7,
                      "tooltip": "Single Station or Array",
                      "type": "LabelValue",
                      "value": "Unknown",
                      "widthPx": 400,
                    }
                  }
                  key="7"
                >
                  <div
                    className="toolbar-label-value"
                    style={Object {}}
                  >
                    <LabelValue
                      ianApp={true}
                      label="Type"
                      tooltip="Single Station or Array"
                      value="Unknown"
                    >
                      <div
                        className="ian-label-value-container"
                      >
                        <div
                          className="ian-label-value__label"
                        >
                          Type: 
                        </div>
                        <div
                          className="ian-label-value__value"
                          style={
                            Object {
                              "color": "",
                            }
                          }
                          title="Single Station or Array"
                        >
                          Unknown
                        </div>
                      </div>
                    </LabelValue>
                  </div>
                </ToolbarItemRenderer>
              </div>
            </div>
          </div>
        </ToolbarComponent>
      </BaseToolbar>
    </StationPropertiesToolbar>
    <HorizontalDivider
      bottom={
        <Blueprint3.NonIdealState
          description="To populate channel data"
          icon="select"
          title="Select a channel group"
        />
      }
      sizeRange={
        Object {
          "minimumBottomHeightPx": 200,
          "minimumTopHeightPx": 200,
        }
      }
      top={
        <SiteConfigurationTable
          columnsToDisplay={
            Map {
              "name" => true,
              "effectiveAt" => true,
              "effectiveUntil" => true,
              "latitudeDegrees" => true,
              "longitudeDegrees" => true,
              "depthKm" => true,
              "elevationKm" => true,
              "description" => true,
              "type" => true,
            }
          }
          onRowSelection={[Function]}
          station={
            Object {
              "channelGroups": Array [
                Object {
                  "name": "channelGroupName",
                },
              ],
              "name": "test",
              "station": "station",
            }
          }
        />
      }
      topHeightPx={250}
    >
      <div
        className="divider-container"
      >
        <div
          className="top-component"
          style={
            Object {
              "height": "250px",
            }
          }
        >
          <SiteConfigurationTable
            columnsToDisplay={
              Map {
                "name" => true,
                "effectiveAt" => true,
                "effectiveUntil" => true,
                "latitudeDegrees" => true,
                "longitudeDegrees" => true,
                "depthKm" => true,
                "elevationKm" => true,
                "description" => true,
                "type" => true,
              }
            }
            onRowSelection={[Function]}
            station={
              Object {
                "channelGroups": Array [
                  Object {
                    "name": "channelGroupName",
                  },
                ],
                "name": "test",
                "station": "station",
              }
            }
          >
            <div
              className="site-configuration-table ag-theme-dark station-properties-table"
            >
              <Component
                className="bp3-heading "
              >
                <h4
                  className="bp3-heading bp3-heading "
                >
                  Channel Group Configuration
                </h4>
              </Component>
              <div
                className="station-properties-table__wrapper"
              >
                <ClientSideTable
                  columnDefs={
                    Array [
                      Object {
                        "field": "name",
                        "headerName": "Name",
                        "headerTooltip": "Name",
                        "width": 200,
                      },
                      Object {
                        "field": "effectiveAt",
                        "headerName": "Effective At",
                        "headerTooltip": "Effective at",
                        "width": 200,
                      },
                      Object {
                        "field": "effectiveUntil",
                        "headerName": "Effective Until",
                        "headerTooltip": "Effective until",
                        "width": 200,
                      },
                      Object {
                        "comparator": [Function],
                        "field": "latitudeDegrees",
                        "headerName": "Lat (°)",
                        "headerTooltip": "Latitude in degrees",
                      },
                      Object {
                        "comparator": [Function],
                        "field": "longitudeDegrees",
                        "headerName": "Lon (°)",
                        "headerTooltip": "Longitude in degrees",
                      },
                      Object {
                        "comparator": [Function],
                        "field": "depthKm",
                        "headerName": "Depth (km)",
                        "headerTooltip": "Depth in kilometers",
                      },
                      Object {
                        "comparator": [Function],
                        "field": "elevationKm",
                        "headerName": "Elev (km)",
                        "headerTooltip": "Elevation in kilometers",
                      },
                      Object {
                        "field": "description",
                        "headerName": "Description",
                        "headerTooltip": "Description",
                        "width": 300,
                      },
                      Object {
                        "field": "type",
                        "headerName": "Type",
                        "headerTooltip": "Type",
                        "width": 200,
                      },
                    ]
                  }
                  context={Object {}}
                  defaultColDef={
                    Object {
                      "cellRendererFramework": [Function],
                      "disableStaticMarkupForCellRendererFramework": true,
                      "disableStaticMarkupForHeaderComponentFramework": true,
                      "filter": true,
                      "headerClass": "station-properties-header-cell",
                      "hide": true,
                      "lockVisible": false,
                      "resizable": true,
                      "sortable": true,
                      "width": 105,
                    }
                  }
                  deltaRowDataMode={false}
                  getRowNodeId={[Function]}
                  headerHeight={44}
                  onGridReady={[Function]}
                  onRowClicked={[Function]}
                  overlayNoRowsTemplate="No Sites to display"
                  rowData={
                    Array [
                      Object {
                        "depthKm": "Unknown",
                        "description": "Unknown",
                        "effectiveAt": "Unknown",
                        "effectiveUntil": "Unknown",
                        "elevationKm": "Unknown",
                        "id": "0",
                        "latitudeDegrees": "Unknown",
                        "longitudeDegrees": "Unknown",
                        "name": "channelGroupName",
                        "type": "Unknown",
                      },
                    ]
                  }
                  rowDeselection={true}
                  rowHeight={40}
                  rowSelection="single"
                  suppressCellSelection={true}
                  suppressContextMenu={true}
                >
                  <CoreTable
                    columnDefs={
                      Array [
                        Object {
                          "field": "name",
                          "headerName": "Name",
                          "headerTooltip": "Name",
                          "width": 200,
                        },
                        Object {
                          "field": "effectiveAt",
                          "headerName": "Effective At",
                          "headerTooltip": "Effective at",
                          "width": 200,
                        },
                        Object {
                          "field": "effectiveUntil",
                          "headerName": "Effective Until",
                          "headerTooltip": "Effective until",
                          "width": 200,
                        },
                        Object {
                          "comparator": [Function],
                          "field": "latitudeDegrees",
                          "headerName": "Lat (°)",
                          "headerTooltip": "Latitude in degrees",
                        },
                        Object {
                          "comparator": [Function],
                          "field": "longitudeDegrees",
                          "headerName": "Lon (°)",
                          "headerTooltip": "Longitude in degrees",
                        },
                        Object {
                          "comparator": [Function],
                          "field": "depthKm",
                          "headerName": "Depth (km)",
                          "headerTooltip": "Depth in kilometers",
                        },
                        Object {
                          "comparator": [Function],
                          "field": "elevationKm",
                          "headerName": "Elev (km)",
                          "headerTooltip": "Elevation in kilometers",
                        },
                        Object {
                          "field": "description",
                          "headerName": "Description",
                          "headerTooltip": "Description",
                          "width": 300,
                        },
                        Object {
                          "field": "type",
                          "headerName": "Type",
                          "headerTooltip": "Type",
                          "width": 200,
                        },
                      ]
                    }
                    context={Object {}}
                    defaultColDef={
                      Object {
                        "cellRendererFramework": [Function],
                        "disableStaticMarkupForCellRendererFramework": true,
                        "disableStaticMarkupForHeaderComponentFramework": true,
                        "filter": true,
                        "headerClass": "station-properties-header-cell",
                        "hide": true,
                        "lockVisible": false,
                        "resizable": true,
                        "sortable": true,
                        "width": 105,
                      }
                    }
                    deltaRowDataMode={false}
                    getRowNodeId={[Function]}
                    headerHeight={44}
                    onGridReady={[Function]}
                    onRowClicked={[Function]}
                    overlayNoRowsTemplate="No Sites to display"
                    rowBuffer={10}
                    rowData={
                      Array [
                        Object {
                          "depthKm": "Unknown",
                          "description": "Unknown",
                          "effectiveAt": "Unknown",
                          "effectiveUntil": "Unknown",
                          "elevationKm": "Unknown",
                          "id": "0",
                          "latitudeDegrees": "Unknown",
                          "longitudeDegrees": "Unknown",
                          "name": "channelGroupName",
                          "type": "Unknown",
                        },
                      ]
                    }
                    rowDeselection={true}
                    rowHeight={40}
                    rowSelection="single"
                    suppressCellSelection={true}
                    suppressContextMenu={true}
                  >
                    <AgGridReact
                      animateRows={false}
                      columnDefs={
                        Array [
                          Object {
                            "field": "name",
                            "headerName": "Name",
                            "headerTooltip": "Name",
                            "width": 200,
                          },
                          Object {
                            "field": "effectiveAt",
                            "headerName": "Effective At",
                            "headerTooltip": "Effective at",
                            "width": 200,
                          },
                          Object {
                            "field": "effectiveUntil",
                            "headerName": "Effective Until",
                            "headerTooltip": "Effective until",
                            "width": 200,
                          },
                          Object {
                            "comparator": [Function],
                            "field": "latitudeDegrees",
                            "headerName": "Lat (°)",
                            "headerTooltip": "Latitude in degrees",
                          },
                          Object {
                            "comparator": [Function],
                            "field": "longitudeDegrees",
                            "headerName": "Lon (°)",
                            "headerTooltip": "Longitude in degrees",
                          },
                          Object {
                            "comparator": [Function],
                            "field": "depthKm",
                            "headerName": "Depth (km)",
                            "headerTooltip": "Depth in kilometers",
                          },
                          Object {
                            "comparator": [Function],
                            "field": "elevationKm",
                            "headerName": "Elev (km)",
                            "headerTooltip": "Elevation in kilometers",
                          },
                          Object {
                            "field": "description",
                            "headerName": "Description",
                            "headerTooltip": "Description",
                            "width": 300,
                          },
                          Object {
                            "field": "type",
                            "headerName": "Type",
                            "headerTooltip": "Type",
                            "width": 200,
                          },
                        ]
                      }
                      context={Object {}}
                      defaultColDef={
                        Object {
                          "cellRendererFramework": [Function],
                          "filter": true,
                          "headerClass": "station-properties-header-cell",
                          "hide": true,
                          "lockVisible": false,
                          "resizable": true,
                          "sortable": true,
                          "sortingOrder": Array [
                            "asc",
                            "desc",
                          ],
                          "suppressCellFlash": true,
                          "width": 105,
                        }
                      }
                      deltaRowDataMode={true}
                      getRowNodeId={[Function]}
                      headerHeight={44}
                      onColumnMoved={[Function]}
                      onGridReady={[Function]}
                      onRowClicked={[Function]}
                      overlayNoRowsTemplate="No Sites to display"
                      preventDefaultOnContextMenu={true}
                      rowBuffer={10}
                      rowData={null}
                      rowDataChangeDetectionStrategy="IdentityCheck"
                      rowDeselection={true}
                      rowHeight={40}
                      rowSelection="single"
                      suppressCellSelection={true}
                      suppressContextMenu={true}
                      suppressLoadingOverlay={true}
                      suppressScrollOnNewData={true}
                    >
                      <div
                        style={
                          Object {
                            "height": "100%",
                          }
                        }
                      />
                    </AgGridReact>
                  </CoreTable>
                </ClientSideTable>
              </div>
            </div>
          </SiteConfigurationTable>
        </div>
        <DragHandleDivider
          handleHeight={7}
          onDrag={[Function]}
        >
          <div
            className="horizontal-divider"
            onMouseDown={[Function]}
            onMouseOut={[Function]}
            onMouseOver={[Function]}
            onMouseUp={[Function]}
          >
            <div
              className="horizontal-divider__target"
            />
            <div
              className="horizontal-divider__spacer"
            />
            <svg
              className="resize-handle"
              height="7"
              viewBox="0 0 18 7"
              width="18"
            >
              <title>
                Resize
              </title>
              <g
                className="resize-handle-group"
                data-name="resize-handle-group"
              >
                <rect
                  height="7"
                  rx="1"
                  width="2"
                />
                <rect
                  height="7"
                  rx="1"
                  width="2"
                  x="4"
                />
                <rect
                  height="7"
                  rx="1"
                  width="2"
                  x="8"
                />
                <rect
                  height="7"
                  rx="1"
                  width="2"
                  x="12"
                />
                <rect
                  height="7"
                  rx="1"
                  width="2"
                  x="16"
                />
              </g>
            </svg>
            <div
              className="horizontal-divider__spacer"
            />
          </div>
        </DragHandleDivider>
        <div
          className="bottom-component"
          style={
            Object {
              "height": "1px",
            }
          }
        >
          <Blueprint3.NonIdealState
            description="To populate channel data"
            icon="select"
            title="Select a channel group"
          >
            <div
              className="bp3-non-ideal-state"
            >
              <div
                className="bp3-non-ideal-state-visual"
              >
                <Blueprint3.Icon
                  icon="select"
                  iconSize={60}
                >
                  <span
                    className="bp3-icon bp3-icon-select"
                    icon="select"
                  >
                    <svg
                      data-icon="select"
                      height={60}
                      viewBox="0 0 20 20"
                      width={60}
                    >
                      <desc>
                        select
                      </desc>
                      <path
                        d="M19.71 18.29l-4.25-4.25L20 12.91 9.93 9.33c.04-.1.07-.21.07-.33V3c0-.55-.45-1-1-1H4V1c0-.55-.45-1-1-1S2 .45 2 1v1H1c-.55 0-1 .45-1 1s.45 1 1 1h1v5c0 .55.45 1 1 1h6c.12 0 .23-.03.34-.07L12.91 20l1.14-4.54 4.25 4.25c.17.18.42.29.7.29a1.003 1.003 0 00.71-1.71zM8 8H4V4h4v4z"
                        fillRule="evenodd"
                        key="0"
                      />
                    </svg>
                  </span>
                </Blueprint3.Icon>
              </div>
              <Component>
                <h4
                  className="bp3-heading"
                >
                  Select a channel group
                </h4>
              </Component>
              <div>
                To populate channel data
              </div>
            </div>
          </Blueprint3.NonIdealState>
        </div>
      </div>
    </HorizontalDivider>
  </div>
</StationPropertiesPanel>
`;

exports[`station-properties-panel matches snapshot with [] station data 1`] = `
<StationPropertiesPanel
  effectiveAtTimes={
    Array [
      "some time",
    ]
  }
  selectedStation="test"
>
  <div
    className="station-properties-panel"
  >
    <StationPropertiesToolbar
      effectiveAtTimes={
        Array [
          "some time",
        ]
      }
      onEffectiveTimeChange={[Function]}
      selectedEffectiveAt="some time"
      setSelectedChannelColumnsToDisplay={[Function]}
      setSelectedSiteColumnsToDisplay={[Function]}
      stationName="test"
    >
      <BaseToolbar
        items={
          Array [
            Object {
              "ianApp": true,
              "label": "Station",
              "rank": 1,
              "tooltip": "Currently Selected Station",
              "type": "LabelValue",
              "value": "test",
              "widthPx": 400,
            },
            Object {
              "ianApp": true,
              "label": "Lat",
              "rank": 2,
              "tooltip": "Station Latitude",
              "type": "LabelValue",
              "value": "Unknown°",
              "widthPx": 400,
            },
            Object {
              "ianApp": true,
              "label": "Lon",
              "rank": 3,
              "tooltip": "Station Longitude",
              "type": "LabelValue",
              "value": "Unknown°",
              "widthPx": 400,
            },
            Object {
              "ianApp": true,
              "label": "Depth",
              "rank": 4,
              "tooltip": "Depth (km)",
              "type": "LabelValue",
              "value": "Unknown",
              "widthPx": 400,
            },
            Object {
              "ianApp": true,
              "label": "Elev",
              "rank": 5,
              "tooltip": "Station Elevation",
              "type": "LabelValue",
              "value": "Unknown",
            },
            Object {
              "ianApp": true,
              "label": "Description",
              "rank": 6,
              "tooltip": "Station Description",
              "type": "LabelValue",
              "value": "Unknown",
              "widthPx": 400,
            },
            Object {
              "ianApp": true,
              "label": "Type",
              "rank": 7,
              "tooltip": "Single Station or Array",
              "type": "LabelValue",
              "value": "Unknown",
              "widthPx": 400,
            },
          ]
        }
        itemsLeft={
          Array [
            Object {
              "displayLabel": true,
              "dropdownOptions": Array [
                "some time",
              ],
              "dropdownText": Array [
                "Unknown",
              ],
              "label": "Effective At",
              "onChange": [Function],
              "rank": 1,
              "tooltip": "Select Effective Time to display",
              "type": "Dropdown",
              "value": "some time",
              "widthPx": 220,
            },
            Object {
              "cyData": "station-properties-channel-group-column-picker",
              "enumKeysToDisplayStrings": Map {
                "name" => "Name",
                "effectiveAt" => "Effective At",
                "effectiveUntil" => "Effective Until",
                "latitudeDegrees" => "Latitude",
                "longitudeDegrees" => "Longitude",
                "depthKm" => "Depth",
                "elevationKm" => "Elevation",
                "description" => "Description",
                "type" => "Type",
              },
              "enumOfKeys": Object {
                "depthKm": "depthKm",
                "description": "description",
                "effectiveAt": "effectiveAt",
                "effectiveUntil": "effectiveUntil",
                "elevationKm": "elevationKm",
                "latitudeDegrees": "latitudeDegrees",
                "longitudeDegrees": "longitudeDegrees",
                "name": "name",
                "type": "type",
              },
              "label": "Channel Group Columns",
              "menuLabel": "Channel Group Columns",
              "onChange": [Function],
              "rank": 2,
              "tooltip": "Select columns to be shown in the channel group table below",
              "type": "CheckboxList",
              "values": Map {
                "name" => true,
                "effectiveAt" => true,
                "effectiveUntil" => true,
                "latitudeDegrees" => true,
                "longitudeDegrees" => true,
                "depthKm" => true,
                "elevationKm" => true,
                "description" => true,
                "type" => true,
              },
              "widthPx": 220,
            },
            Object {
              "cyData": "station-properties-channel-column-picker",
              "enumKeysToDisplayStrings": Map {
                "name" => "Name",
                "effectiveAt" => "Effective At",
                "effectiveUntil" => "Effective Until",
                "latitudeDegrees" => "Latitude",
                "longitudeDegrees" => "Longitude",
                "depthKm" => "Depth",
                "elevationKm" => "Elevation",
                "nominalSampleRateHz" => "Sample Rate",
                "units" => "Units",
                "orientationHorizontalDegrees" => "Horizontal Angle",
                "orientationVerticalDegrees" => "Vertical Angle",
                "calibrationFactor" => "Calibration Factor",
                "calibrationPeriod" => "Calibration Period",
                "calibrationEffectiveAt" => "Calibration Effective At",
                "calibrationTimeShift" => "Calibration Time Shift",
                "calibrationStandardDeviation" => "Calibration Std Dev",
                "northDisplacementKm" => "North Displacement",
                "eastDisplacementKm" => "East Displacement",
                "verticalDisplacementKm" => "Vertical Displacement",
                "description" => "Description",
                "channelDataType" => "Data Type",
                "channelBandType" => "Band Type",
                "channelInstrumentType" => "Instrument Type",
                "channelOrientationCode" => "Orientation Code",
                "channelOrientationType" => "Orientation Type",
                "calibrationResponseId" => "Calibration ID",
                "fapResponseId" => "FAP Resp ID",
              },
              "enumOfKeys": Object {
                "calibrationEffectiveAt": "calibrationEffectiveAt",
                "calibrationFactor": "calibrationFactor",
                "calibrationPeriod": "calibrationPeriod",
                "calibrationResponseId": "calibrationResponseId",
                "calibrationStandardDeviation": "calibrationStandardDeviation",
                "calibrationTimeShift": "calibrationTimeShift",
                "channelBandType": "channelBandType",
                "channelDataType": "channelDataType",
                "channelInstrumentType": "channelInstrumentType",
                "channelOrientationCode": "channelOrientationCode",
                "channelOrientationType": "channelOrientationType",
                "depthKm": "depthKm",
                "description": "description",
                "eastDisplacementKm": "eastDisplacementKm",
                "effectiveAt": "effectiveAt",
                "effectiveUntil": "effectiveUntil",
                "elevationKm": "elevationKm",
                "fapResponseId": "fapResponseId",
                "latitudeDegrees": "latitudeDegrees",
                "longitudeDegrees": "longitudeDegrees",
                "name": "name",
                "nominalSampleRateHz": "nominalSampleRateHz",
                "northDisplacementKm": "northDisplacementKm",
                "orientationHorizontalDegrees": "orientationHorizontalDegrees",
                "orientationVerticalDegrees": "orientationVerticalDegrees",
                "units": "units",
                "verticalDisplacementKm": "verticalDisplacementKm",
              },
              "label": "Channel Columns",
              "menuLabel": "Channel Columns",
              "onChange": [Function],
              "rank": 3,
              "tooltip": "Select columns to be shown in the channel table below",
              "type": "CheckboxList",
              "values": Map {
                "name" => true,
                "effectiveAt" => true,
                "effectiveUntil" => true,
                "latitudeDegrees" => true,
                "longitudeDegrees" => true,
                "depthKm" => true,
                "elevationKm" => true,
                "nominalSampleRateHz" => true,
                "units" => true,
                "orientationHorizontalDegrees" => true,
                "orientationVerticalDegrees" => true,
                "calibrationFactor" => true,
                "calibrationPeriod" => true,
                "calibrationEffectiveAt" => true,
                "calibrationTimeShift" => true,
                "calibrationStandardDeviation" => true,
                "northDisplacementKm" => true,
                "eastDisplacementKm" => true,
                "verticalDisplacementKm" => true,
                "description" => true,
                "channelDataType" => false,
                "channelBandType" => false,
                "channelInstrumentType" => false,
                "channelOrientationCode" => false,
                "channelOrientationType" => false,
                "calibrationResponseId" => true,
                "fapResponseId" => true,
              },
              "widthPx": 220,
            },
          ]
        }
        widthPx={100}
      >
        <ToolbarComponent
          items={
            Array [
              Object {
                "ianApp": true,
                "label": "Station",
                "rank": 1,
                "tooltip": "Currently Selected Station",
                "type": "LabelValue",
                "value": "test",
                "widthPx": 400,
              },
              Object {
                "ianApp": true,
                "label": "Lat",
                "rank": 2,
                "tooltip": "Station Latitude",
                "type": "LabelValue",
                "value": "Unknown°",
                "widthPx": 400,
              },
              Object {
                "ianApp": true,
                "label": "Lon",
                "rank": 3,
                "tooltip": "Station Longitude",
                "type": "LabelValue",
                "value": "Unknown°",
                "widthPx": 400,
              },
              Object {
                "ianApp": true,
                "label": "Depth",
                "rank": 4,
                "tooltip": "Depth (km)",
                "type": "LabelValue",
                "value": "Unknown",
                "widthPx": 400,
              },
              Object {
                "ianApp": true,
                "label": "Elev",
                "rank": 5,
                "tooltip": "Station Elevation",
                "type": "LabelValue",
                "value": "Unknown",
              },
              Object {
                "ianApp": true,
                "label": "Description",
                "rank": 6,
                "tooltip": "Station Description",
                "type": "LabelValue",
                "value": "Unknown",
                "widthPx": 400,
              },
              Object {
                "ianApp": true,
                "label": "Type",
                "rank": 7,
                "tooltip": "Single Station or Array",
                "type": "LabelValue",
                "value": "Unknown",
                "widthPx": 400,
              },
            ]
          }
          itemsLeft={
            Array [
              Object {
                "displayLabel": true,
                "dropdownOptions": Array [
                  "some time",
                ],
                "dropdownText": Array [
                  "Unknown",
                ],
                "label": "Effective At",
                "onChange": [Function],
                "rank": 1,
                "tooltip": "Select Effective Time to display",
                "type": "Dropdown",
                "value": "some time",
                "widthPx": 220,
              },
              Object {
                "cyData": "station-properties-channel-group-column-picker",
                "enumKeysToDisplayStrings": Map {
                  "name" => "Name",
                  "effectiveAt" => "Effective At",
                  "effectiveUntil" => "Effective Until",
                  "latitudeDegrees" => "Latitude",
                  "longitudeDegrees" => "Longitude",
                  "depthKm" => "Depth",
                  "elevationKm" => "Elevation",
                  "description" => "Description",
                  "type" => "Type",
                },
                "enumOfKeys": Object {
                  "depthKm": "depthKm",
                  "description": "description",
                  "effectiveAt": "effectiveAt",
                  "effectiveUntil": "effectiveUntil",
                  "elevationKm": "elevationKm",
                  "latitudeDegrees": "latitudeDegrees",
                  "longitudeDegrees": "longitudeDegrees",
                  "name": "name",
                  "type": "type",
                },
                "label": "Channel Group Columns",
                "menuLabel": "Channel Group Columns",
                "onChange": [Function],
                "rank": 2,
                "tooltip": "Select columns to be shown in the channel group table below",
                "type": "CheckboxList",
                "values": Map {
                  "name" => true,
                  "effectiveAt" => true,
                  "effectiveUntil" => true,
                  "latitudeDegrees" => true,
                  "longitudeDegrees" => true,
                  "depthKm" => true,
                  "elevationKm" => true,
                  "description" => true,
                  "type" => true,
                },
                "widthPx": 220,
              },
              Object {
                "cyData": "station-properties-channel-column-picker",
                "enumKeysToDisplayStrings": Map {
                  "name" => "Name",
                  "effectiveAt" => "Effective At",
                  "effectiveUntil" => "Effective Until",
                  "latitudeDegrees" => "Latitude",
                  "longitudeDegrees" => "Longitude",
                  "depthKm" => "Depth",
                  "elevationKm" => "Elevation",
                  "nominalSampleRateHz" => "Sample Rate",
                  "units" => "Units",
                  "orientationHorizontalDegrees" => "Horizontal Angle",
                  "orientationVerticalDegrees" => "Vertical Angle",
                  "calibrationFactor" => "Calibration Factor",
                  "calibrationPeriod" => "Calibration Period",
                  "calibrationEffectiveAt" => "Calibration Effective At",
                  "calibrationTimeShift" => "Calibration Time Shift",
                  "calibrationStandardDeviation" => "Calibration Std Dev",
                  "northDisplacementKm" => "North Displacement",
                  "eastDisplacementKm" => "East Displacement",
                  "verticalDisplacementKm" => "Vertical Displacement",
                  "description" => "Description",
                  "channelDataType" => "Data Type",
                  "channelBandType" => "Band Type",
                  "channelInstrumentType" => "Instrument Type",
                  "channelOrientationCode" => "Orientation Code",
                  "channelOrientationType" => "Orientation Type",
                  "calibrationResponseId" => "Calibration ID",
                  "fapResponseId" => "FAP Resp ID",
                },
                "enumOfKeys": Object {
                  "calibrationEffectiveAt": "calibrationEffectiveAt",
                  "calibrationFactor": "calibrationFactor",
                  "calibrationPeriod": "calibrationPeriod",
                  "calibrationResponseId": "calibrationResponseId",
                  "calibrationStandardDeviation": "calibrationStandardDeviation",
                  "calibrationTimeShift": "calibrationTimeShift",
                  "channelBandType": "channelBandType",
                  "channelDataType": "channelDataType",
                  "channelInstrumentType": "channelInstrumentType",
                  "channelOrientationCode": "channelOrientationCode",
                  "channelOrientationType": "channelOrientationType",
                  "depthKm": "depthKm",
                  "description": "description",
                  "eastDisplacementKm": "eastDisplacementKm",
                  "effectiveAt": "effectiveAt",
                  "effectiveUntil": "effectiveUntil",
                  "elevationKm": "elevationKm",
                  "fapResponseId": "fapResponseId",
                  "latitudeDegrees": "latitudeDegrees",
                  "longitudeDegrees": "longitudeDegrees",
                  "name": "name",
                  "nominalSampleRateHz": "nominalSampleRateHz",
                  "northDisplacementKm": "northDisplacementKm",
                  "orientationHorizontalDegrees": "orientationHorizontalDegrees",
                  "orientationVerticalDegrees": "orientationVerticalDegrees",
                  "units": "units",
                  "verticalDisplacementKm": "verticalDisplacementKm",
                },
                "label": "Channel Columns",
                "menuLabel": "Channel Columns",
                "onChange": [Function],
                "rank": 3,
                "tooltip": "Select columns to be shown in the channel table below",
                "type": "CheckboxList",
                "values": Map {
                  "name" => true,
                  "effectiveAt" => true,
                  "effectiveUntil" => true,
                  "latitudeDegrees" => true,
                  "longitudeDegrees" => true,
                  "depthKm" => true,
                  "elevationKm" => true,
                  "nominalSampleRateHz" => true,
                  "units" => true,
                  "orientationHorizontalDegrees" => true,
                  "orientationVerticalDegrees" => true,
                  "calibrationFactor" => true,
                  "calibrationPeriod" => true,
                  "calibrationEffectiveAt" => true,
                  "calibrationTimeShift" => true,
                  "calibrationStandardDeviation" => true,
                  "northDisplacementKm" => true,
                  "eastDisplacementKm" => true,
                  "verticalDisplacementKm" => true,
                  "description" => true,
                  "channelDataType" => false,
                  "channelBandType" => false,
                  "channelInstrumentType" => false,
                  "channelOrientationCode" => false,
                  "channelOrientationType" => false,
                  "calibrationResponseId" => true,
                  "fapResponseId" => true,
                },
                "widthPx": 220,
              },
            ]
          }
          minWhiteSpacePx={1}
          toolbarWidthPx={60}
          widthPx={100}
        >
          <div
            className="toolbar"
            style={
              Object {
                "width": "60px",
              }
            }
          >
            <div
              className="toolbar__left-group"
            >
              <div
                className="toolbar-item toolbar-item__left"
                key="1"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "displayLabel": true,
                      "dropdownOptions": Array [
                        "some time",
                      ],
                      "dropdownText": Array [
                        "Unknown",
                      ],
                      "label": "Effective At",
                      "onChange": [Function],
                      "rank": 1,
                      "tooltip": "Select Effective Time to display",
                      "type": "Dropdown",
                      "value": "some time",
                      "widthPx": 220,
                    }
                  }
                  key="1"
                >
                  <div
                    style={Object {}}
                  >
                    <DropDown
                      displayLabel={true}
                      dropDownItems={
                        Array [
                          "some time",
                        ]
                      }
                      dropdownText={
                        Array [
                          "Unknown",
                        ]
                      }
                      key="1"
                      label="Effective At"
                      onMaybeValue={[Function]}
                      title="Select Effective Time to display"
                      value="some time"
                      widthPx={220}
                    >
                      <div
                        className="dropdown-container"
                      >
                        <span
                          className="dropdown-label"
                        >
                          Effective At: 
                        </span>
                        <span
                          className="dropdown-selector"
                        >
                          <HTMLSelect
                            onChange={[Function]}
                            style={
                              Object {
                                "minWidth": "220px",
                                "width": "220px",
                              }
                            }
                            title="Select Effective Time to display"
                            value="some time"
                          >
                            <div
                              className="bp3-html-select"
                            >
                              <select
                                multiple={false}
                                onChange={[Function]}
                                style={
                                  Object {
                                    "minWidth": "220px",
                                    "width": "220px",
                                  }
                                }
                                title="Select Effective Time to display"
                                value="some time"
                              >
                                <option
                                  key="0"
                                  value="some time"
                                >
                                  Unknown
                                </option>
                              </select>
                              <Blueprint3.Icon
                                icon="double-caret-vertical"
                              >
                                <span
                                  className="bp3-icon bp3-icon-double-caret-vertical"
                                  icon="double-caret-vertical"
                                >
                                  <svg
                                    data-icon="double-caret-vertical"
                                    height={16}
                                    viewBox="0 0 16 16"
                                    width={16}
                                  >
                                    <desc>
                                      double-caret-vertical
                                    </desc>
                                    <path
                                      d="M5 7h6a1.003 1.003 0 00.71-1.71l-3-3C8.53 2.11 8.28 2 8 2s-.53.11-.71.29l-3 3A1.003 1.003 0 005 7zm6 2H5a1.003 1.003 0 00-.71 1.71l3 3c.18.18.43.29.71.29s.53-.11.71-.29l3-3A1.003 1.003 0 0011 9z"
                                      fillRule="evenodd"
                                      key="0"
                                    />
                                  </svg>
                                </span>
                              </Blueprint3.Icon>
                            </div>
                          </HTMLSelect>
                        </span>
                      </div>
                    </DropDown>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item toolbar-item__left"
                key="2"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "cyData": "station-properties-channel-group-column-picker",
                      "enumKeysToDisplayStrings": Map {
                        "name" => "Name",
                        "effectiveAt" => "Effective At",
                        "effectiveUntil" => "Effective Until",
                        "latitudeDegrees" => "Latitude",
                        "longitudeDegrees" => "Longitude",
                        "depthKm" => "Depth",
                        "elevationKm" => "Elevation",
                        "description" => "Description",
                        "type" => "Type",
                      },
                      "enumOfKeys": Object {
                        "depthKm": "depthKm",
                        "description": "description",
                        "effectiveAt": "effectiveAt",
                        "effectiveUntil": "effectiveUntil",
                        "elevationKm": "elevationKm",
                        "latitudeDegrees": "latitudeDegrees",
                        "longitudeDegrees": "longitudeDegrees",
                        "name": "name",
                        "type": "type",
                      },
                      "label": "Channel Group Columns",
                      "menuLabel": "Channel Group Columns",
                      "onChange": [Function],
                      "rank": 2,
                      "tooltip": "Select columns to be shown in the channel group table below",
                      "type": "CheckboxList",
                      "values": Map {
                        "name" => true,
                        "effectiveAt" => true,
                        "effectiveUntil" => true,
                        "latitudeDegrees" => true,
                        "longitudeDegrees" => true,
                        "depthKm" => true,
                        "elevationKm" => true,
                        "description" => true,
                        "type" => true,
                      },
                      "widthPx": 220,
                    }
                  }
                  key="2"
                >
                  <div
                    style={Object {}}
                  >
                    <PopoverButtonComponent
                      cyData="station-properties-channel-group-column-picker"
                      key="2"
                      label="Channel Group Columns"
                      onClick={[Function]}
                      onPopoverDismissed={[Function]}
                      popupContent={
                        <CheckboxList
                          checkboxEnum={
                            Object {
                              "depthKm": "depthKm",
                              "description": "description",
                              "effectiveAt": "effectiveAt",
                              "effectiveUntil": "effectiveUntil",
                              "elevationKm": "elevationKm",
                              "latitudeDegrees": "latitudeDegrees",
                              "longitudeDegrees": "longitudeDegrees",
                              "name": "name",
                              "type": "type",
                            }
                          }
                          enumKeysToDisplayStrings={
                            Map {
                              "name" => "Name",
                              "effectiveAt" => "Effective At",
                              "effectiveUntil" => "Effective Until",
                              "latitudeDegrees" => "Latitude",
                              "longitudeDegrees" => "Longitude",
                              "depthKm" => "Depth",
                              "elevationKm" => "Elevation",
                              "description" => "Description",
                              "type" => "Type",
                            }
                          }
                          enumToCheckedMap={
                            Map {
                              "name" => true,
                              "effectiveAt" => true,
                              "effectiveUntil" => true,
                              "latitudeDegrees" => true,
                              "longitudeDegrees" => true,
                              "depthKm" => true,
                              "elevationKm" => true,
                              "description" => true,
                              "type" => true,
                            }
                          }
                          onChange={[Function]}
                        />
                      }
                      tooltip="Select columns to be shown in the channel group table below"
                      widthPx={220}
                    >
                      <div
                        data-cy="station-properties-channel-group-column-picker"
                      >
                        <Blueprint3.Button
                          active={false}
                          alignText="left"
                          className="toolbar-button"
                          onClick={[Function]}
                          style={
                            Object {
                              "width": "220px",
                            }
                          }
                          title="Select columns to be shown in the channel group table below"
                        >
                          <button
                            className="bp3-button bp3-align-left toolbar-button"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            style={
                              Object {
                                "width": "220px",
                              }
                            }
                            title="Select columns to be shown in the channel group table below"
                            type="button"
                          >
                            <Blueprint3.Icon
                              key="leftIcon"
                            />
                            <span
                              className="bp3-button-text"
                              key="text"
                            >
                              <span>
                                Channel Group Columns
                              </span>
                              <Blueprint3.Icon
                                icon="chevron-down"
                                title={false}
                              >
                                <span
                                  className="bp3-icon bp3-icon-chevron-down"
                                  icon="chevron-down"
                                >
                                  <svg
                                    data-icon="chevron-down"
                                    height={16}
                                    viewBox="0 0 16 16"
                                    width={16}
                                  >
                                    <path
                                      d="M12 5c-.28 0-.53.11-.71.29L8 8.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42l4 4c.18.18.43.29.71.29s.53-.11.71-.29l4-4A1.003 1.003 0 0012 5z"
                                      fillRule="evenodd"
                                      key="0"
                                    />
                                  </svg>
                                </span>
                              </Blueprint3.Icon>
                            </span>
                            <Blueprint3.Icon
                              key="rightIcon"
                            />
                          </button>
                        </Blueprint3.Button>
                      </div>
                    </PopoverButtonComponent>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item toolbar-item__left"
                key="3"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "cyData": "station-properties-channel-column-picker",
                      "enumKeysToDisplayStrings": Map {
                        "name" => "Name",
                        "effectiveAt" => "Effective At",
                        "effectiveUntil" => "Effective Until",
                        "latitudeDegrees" => "Latitude",
                        "longitudeDegrees" => "Longitude",
                        "depthKm" => "Depth",
                        "elevationKm" => "Elevation",
                        "nominalSampleRateHz" => "Sample Rate",
                        "units" => "Units",
                        "orientationHorizontalDegrees" => "Horizontal Angle",
                        "orientationVerticalDegrees" => "Vertical Angle",
                        "calibrationFactor" => "Calibration Factor",
                        "calibrationPeriod" => "Calibration Period",
                        "calibrationEffectiveAt" => "Calibration Effective At",
                        "calibrationTimeShift" => "Calibration Time Shift",
                        "calibrationStandardDeviation" => "Calibration Std Dev",
                        "northDisplacementKm" => "North Displacement",
                        "eastDisplacementKm" => "East Displacement",
                        "verticalDisplacementKm" => "Vertical Displacement",
                        "description" => "Description",
                        "channelDataType" => "Data Type",
                        "channelBandType" => "Band Type",
                        "channelInstrumentType" => "Instrument Type",
                        "channelOrientationCode" => "Orientation Code",
                        "channelOrientationType" => "Orientation Type",
                        "calibrationResponseId" => "Calibration ID",
                        "fapResponseId" => "FAP Resp ID",
                      },
                      "enumOfKeys": Object {
                        "calibrationEffectiveAt": "calibrationEffectiveAt",
                        "calibrationFactor": "calibrationFactor",
                        "calibrationPeriod": "calibrationPeriod",
                        "calibrationResponseId": "calibrationResponseId",
                        "calibrationStandardDeviation": "calibrationStandardDeviation",
                        "calibrationTimeShift": "calibrationTimeShift",
                        "channelBandType": "channelBandType",
                        "channelDataType": "channelDataType",
                        "channelInstrumentType": "channelInstrumentType",
                        "channelOrientationCode": "channelOrientationCode",
                        "channelOrientationType": "channelOrientationType",
                        "depthKm": "depthKm",
                        "description": "description",
                        "eastDisplacementKm": "eastDisplacementKm",
                        "effectiveAt": "effectiveAt",
                        "effectiveUntil": "effectiveUntil",
                        "elevationKm": "elevationKm",
                        "fapResponseId": "fapResponseId",
                        "latitudeDegrees": "latitudeDegrees",
                        "longitudeDegrees": "longitudeDegrees",
                        "name": "name",
                        "nominalSampleRateHz": "nominalSampleRateHz",
                        "northDisplacementKm": "northDisplacementKm",
                        "orientationHorizontalDegrees": "orientationHorizontalDegrees",
                        "orientationVerticalDegrees": "orientationVerticalDegrees",
                        "units": "units",
                        "verticalDisplacementKm": "verticalDisplacementKm",
                      },
                      "label": "Channel Columns",
                      "menuLabel": "Channel Columns",
                      "onChange": [Function],
                      "rank": 3,
                      "tooltip": "Select columns to be shown in the channel table below",
                      "type": "CheckboxList",
                      "values": Map {
                        "name" => true,
                        "effectiveAt" => true,
                        "effectiveUntil" => true,
                        "latitudeDegrees" => true,
                        "longitudeDegrees" => true,
                        "depthKm" => true,
                        "elevationKm" => true,
                        "nominalSampleRateHz" => true,
                        "units" => true,
                        "orientationHorizontalDegrees" => true,
                        "orientationVerticalDegrees" => true,
                        "calibrationFactor" => true,
                        "calibrationPeriod" => true,
                        "calibrationEffectiveAt" => true,
                        "calibrationTimeShift" => true,
                        "calibrationStandardDeviation" => true,
                        "northDisplacementKm" => true,
                        "eastDisplacementKm" => true,
                        "verticalDisplacementKm" => true,
                        "description" => true,
                        "channelDataType" => false,
                        "channelBandType" => false,
                        "channelInstrumentType" => false,
                        "channelOrientationCode" => false,
                        "channelOrientationType" => false,
                        "calibrationResponseId" => true,
                        "fapResponseId" => true,
                      },
                      "widthPx": 220,
                    }
                  }
                  key="3"
                >
                  <div
                    style={Object {}}
                  >
                    <PopoverButtonComponent
                      cyData="station-properties-channel-column-picker"
                      key="3"
                      label="Channel Columns"
                      onClick={[Function]}
                      onPopoverDismissed={[Function]}
                      popupContent={
                        <CheckboxList
                          checkboxEnum={
                            Object {
                              "calibrationEffectiveAt": "calibrationEffectiveAt",
                              "calibrationFactor": "calibrationFactor",
                              "calibrationPeriod": "calibrationPeriod",
                              "calibrationResponseId": "calibrationResponseId",
                              "calibrationStandardDeviation": "calibrationStandardDeviation",
                              "calibrationTimeShift": "calibrationTimeShift",
                              "channelBandType": "channelBandType",
                              "channelDataType": "channelDataType",
                              "channelInstrumentType": "channelInstrumentType",
                              "channelOrientationCode": "channelOrientationCode",
                              "channelOrientationType": "channelOrientationType",
                              "depthKm": "depthKm",
                              "description": "description",
                              "eastDisplacementKm": "eastDisplacementKm",
                              "effectiveAt": "effectiveAt",
                              "effectiveUntil": "effectiveUntil",
                              "elevationKm": "elevationKm",
                              "fapResponseId": "fapResponseId",
                              "latitudeDegrees": "latitudeDegrees",
                              "longitudeDegrees": "longitudeDegrees",
                              "name": "name",
                              "nominalSampleRateHz": "nominalSampleRateHz",
                              "northDisplacementKm": "northDisplacementKm",
                              "orientationHorizontalDegrees": "orientationHorizontalDegrees",
                              "orientationVerticalDegrees": "orientationVerticalDegrees",
                              "units": "units",
                              "verticalDisplacementKm": "verticalDisplacementKm",
                            }
                          }
                          enumKeysToDisplayStrings={
                            Map {
                              "name" => "Name",
                              "effectiveAt" => "Effective At",
                              "effectiveUntil" => "Effective Until",
                              "latitudeDegrees" => "Latitude",
                              "longitudeDegrees" => "Longitude",
                              "depthKm" => "Depth",
                              "elevationKm" => "Elevation",
                              "nominalSampleRateHz" => "Sample Rate",
                              "units" => "Units",
                              "orientationHorizontalDegrees" => "Horizontal Angle",
                              "orientationVerticalDegrees" => "Vertical Angle",
                              "calibrationFactor" => "Calibration Factor",
                              "calibrationPeriod" => "Calibration Period",
                              "calibrationEffectiveAt" => "Calibration Effective At",
                              "calibrationTimeShift" => "Calibration Time Shift",
                              "calibrationStandardDeviation" => "Calibration Std Dev",
                              "northDisplacementKm" => "North Displacement",
                              "eastDisplacementKm" => "East Displacement",
                              "verticalDisplacementKm" => "Vertical Displacement",
                              "description" => "Description",
                              "channelDataType" => "Data Type",
                              "channelBandType" => "Band Type",
                              "channelInstrumentType" => "Instrument Type",
                              "channelOrientationCode" => "Orientation Code",
                              "channelOrientationType" => "Orientation Type",
                              "calibrationResponseId" => "Calibration ID",
                              "fapResponseId" => "FAP Resp ID",
                            }
                          }
                          enumToCheckedMap={
                            Map {
                              "name" => true,
                              "effectiveAt" => true,
                              "effectiveUntil" => true,
                              "latitudeDegrees" => true,
                              "longitudeDegrees" => true,
                              "depthKm" => true,
                              "elevationKm" => true,
                              "nominalSampleRateHz" => true,
                              "units" => true,
                              "orientationHorizontalDegrees" => true,
                              "orientationVerticalDegrees" => true,
                              "calibrationFactor" => true,
                              "calibrationPeriod" => true,
                              "calibrationEffectiveAt" => true,
                              "calibrationTimeShift" => true,
                              "calibrationStandardDeviation" => true,
                              "northDisplacementKm" => true,
                              "eastDisplacementKm" => true,
                              "verticalDisplacementKm" => true,
                              "description" => true,
                              "channelDataType" => false,
                              "channelBandType" => false,
                              "channelInstrumentType" => false,
                              "channelOrientationCode" => false,
                              "channelOrientationType" => false,
                              "calibrationResponseId" => true,
                              "fapResponseId" => true,
                            }
                          }
                          onChange={[Function]}
                        />
                      }
                      tooltip="Select columns to be shown in the channel table below"
                      widthPx={220}
                    >
                      <div
                        data-cy="station-properties-channel-column-picker"
                      >
                        <Blueprint3.Button
                          active={false}
                          alignText="left"
                          className="toolbar-button"
                          onClick={[Function]}
                          style={
                            Object {
                              "width": "220px",
                            }
                          }
                          title="Select columns to be shown in the channel table below"
                        >
                          <button
                            className="bp3-button bp3-align-left toolbar-button"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            style={
                              Object {
                                "width": "220px",
                              }
                            }
                            title="Select columns to be shown in the channel table below"
                            type="button"
                          >
                            <Blueprint3.Icon
                              key="leftIcon"
                            />
                            <span
                              className="bp3-button-text"
                              key="text"
                            >
                              <span>
                                Channel Columns
                              </span>
                              <Blueprint3.Icon
                                icon="chevron-down"
                                title={false}
                              >
                                <span
                                  className="bp3-icon bp3-icon-chevron-down"
                                  icon="chevron-down"
                                >
                                  <svg
                                    data-icon="chevron-down"
                                    height={16}
                                    viewBox="0 0 16 16"
                                    width={16}
                                  >
                                    <path
                                      d="M12 5c-.28 0-.53.11-.71.29L8 8.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42l4 4c.18.18.43.29.71.29s.53-.11.71-.29l4-4A1.003 1.003 0 0012 5z"
                                      fillRule="evenodd"
                                      key="0"
                                    />
                                  </svg>
                                </span>
                              </Blueprint3.Icon>
                            </span>
                            <Blueprint3.Icon
                              key="rightIcon"
                            />
                          </button>
                        </Blueprint3.Button>
                      </div>
                    </PopoverButtonComponent>
                  </div>
                </ToolbarItemRenderer>
              </div>
            </div>
            <div
              className="toolbar__center-group"
            >
              <div
                className="toolbar__whitespace"
                style={
                  Object {
                    "width": "44px",
                  }
                }
              />
            </div>
            <div
              className="toolbar__right-group"
            >
              <div
                className="toolbar-item
                    "
                key="1"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "ianApp": true,
                      "label": "Station",
                      "rank": 1,
                      "tooltip": "Currently Selected Station",
                      "type": "LabelValue",
                      "value": "test",
                      "widthPx": 400,
                    }
                  }
                  key="1"
                >
                  <div
                    className="toolbar-label-value"
                    style={Object {}}
                  >
                    <LabelValue
                      ianApp={true}
                      label="Station"
                      tooltip="Currently Selected Station"
                      value="test"
                    >
                      <div
                        className="ian-label-value-container"
                      >
                        <div
                          className="ian-label-value__label"
                        >
                          Station: 
                        </div>
                        <div
                          className="ian-label-value__value"
                          style={
                            Object {
                              "color": "",
                            }
                          }
                          title="Currently Selected Station"
                        >
                          test
                        </div>
                      </div>
                    </LabelValue>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="2"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "ianApp": true,
                      "label": "Lat",
                      "rank": 2,
                      "tooltip": "Station Latitude",
                      "type": "LabelValue",
                      "value": "Unknown°",
                      "widthPx": 400,
                    }
                  }
                  key="2"
                >
                  <div
                    className="toolbar-label-value"
                    style={Object {}}
                  >
                    <LabelValue
                      ianApp={true}
                      label="Lat"
                      tooltip="Station Latitude"
                      value="Unknown°"
                    >
                      <div
                        className="ian-label-value-container"
                      >
                        <div
                          className="ian-label-value__label"
                        >
                          Lat: 
                        </div>
                        <div
                          className="ian-label-value__value"
                          style={
                            Object {
                              "color": "",
                            }
                          }
                          title="Station Latitude"
                        >
                          Unknown°
                        </div>
                      </div>
                    </LabelValue>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="3"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "ianApp": true,
                      "label": "Lon",
                      "rank": 3,
                      "tooltip": "Station Longitude",
                      "type": "LabelValue",
                      "value": "Unknown°",
                      "widthPx": 400,
                    }
                  }
                  key="3"
                >
                  <div
                    className="toolbar-label-value"
                    style={Object {}}
                  >
                    <LabelValue
                      ianApp={true}
                      label="Lon"
                      tooltip="Station Longitude"
                      value="Unknown°"
                    >
                      <div
                        className="ian-label-value-container"
                      >
                        <div
                          className="ian-label-value__label"
                        >
                          Lon: 
                        </div>
                        <div
                          className="ian-label-value__value"
                          style={
                            Object {
                              "color": "",
                            }
                          }
                          title="Station Longitude"
                        >
                          Unknown°
                        </div>
                      </div>
                    </LabelValue>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="4"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "ianApp": true,
                      "label": "Depth",
                      "rank": 4,
                      "tooltip": "Depth (km)",
                      "type": "LabelValue",
                      "value": "Unknown",
                      "widthPx": 400,
                    }
                  }
                  key="4"
                >
                  <div
                    className="toolbar-label-value"
                    style={Object {}}
                  >
                    <LabelValue
                      ianApp={true}
                      label="Depth"
                      tooltip="Depth (km)"
                      value="Unknown"
                    >
                      <div
                        className="ian-label-value-container"
                      >
                        <div
                          className="ian-label-value__label"
                        >
                          Depth: 
                        </div>
                        <div
                          className="ian-label-value__value"
                          style={
                            Object {
                              "color": "",
                            }
                          }
                          title="Depth (km)"
                        >
                          Unknown
                        </div>
                      </div>
                    </LabelValue>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="5"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "ianApp": true,
                      "label": "Elev",
                      "rank": 5,
                      "tooltip": "Station Elevation",
                      "type": "LabelValue",
                      "value": "Unknown",
                    }
                  }
                  key="5"
                >
                  <div
                    className="toolbar-label-value"
                    style={Object {}}
                  >
                    <LabelValue
                      ianApp={true}
                      label="Elev"
                      tooltip="Station Elevation"
                      value="Unknown"
                    >
                      <div
                        className="ian-label-value-container"
                      >
                        <div
                          className="ian-label-value__label"
                        >
                          Elev: 
                        </div>
                        <div
                          className="ian-label-value__value"
                          style={
                            Object {
                              "color": "",
                            }
                          }
                          title="Station Elevation"
                        >
                          Unknown
                        </div>
                      </div>
                    </LabelValue>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="6"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "ianApp": true,
                      "label": "Description",
                      "rank": 6,
                      "tooltip": "Station Description",
                      "type": "LabelValue",
                      "value": "Unknown",
                      "widthPx": 400,
                    }
                  }
                  key="6"
                >
                  <div
                    className="toolbar-label-value"
                    style={Object {}}
                  >
                    <LabelValue
                      ianApp={true}
                      label="Description"
                      tooltip="Station Description"
                      value="Unknown"
                    >
                      <div
                        className="ian-label-value-container"
                      >
                        <div
                          className="ian-label-value__label"
                        >
                          Description: 
                        </div>
                        <div
                          className="ian-label-value__value"
                          style={
                            Object {
                              "color": "",
                            }
                          }
                          title="Station Description"
                        >
                          Unknown
                        </div>
                      </div>
                    </LabelValue>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="7"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "ianApp": true,
                      "label": "Type",
                      "rank": 7,
                      "tooltip": "Single Station or Array",
                      "type": "LabelValue",
                      "value": "Unknown",
                      "widthPx": 400,
                    }
                  }
                  key="7"
                >
                  <div
                    className="toolbar-label-value"
                    style={Object {}}
                  >
                    <LabelValue
                      ianApp={true}
                      label="Type"
                      tooltip="Single Station or Array"
                      value="Unknown"
                    >
                      <div
                        className="ian-label-value-container"
                      >
                        <div
                          className="ian-label-value__label"
                        >
                          Type: 
                        </div>
                        <div
                          className="ian-label-value__value"
                          style={
                            Object {
                              "color": "",
                            }
                          }
                          title="Single Station or Array"
                        >
                          Unknown
                        </div>
                      </div>
                    </LabelValue>
                  </div>
                </ToolbarItemRenderer>
              </div>
            </div>
          </div>
        </ToolbarComponent>
      </BaseToolbar>
    </StationPropertiesToolbar>
    <Blueprint3.NonIdealState
      description="There appears to be no data for station"
      icon="exclude-row"
      title="No data for selected station"
    >
      <div
        className="bp3-non-ideal-state"
      >
        <div
          className="bp3-non-ideal-state-visual"
        >
          <Blueprint3.Icon
            icon="exclude-row"
            iconSize={60}
          >
            <span
              className="bp3-icon bp3-icon-exclude-row"
              icon="exclude-row"
            >
              <svg
                data-icon="exclude-row"
                height={60}
                viewBox="0 0 20 20"
                width={60}
              >
                <desc>
                  exclude-row
                </desc>
                <path
                  d="M1 3h18c.55 0 1-.45 1-1s-.45-1-1-1H1c-.55 0-1 .45-1 1s.45 1 1 1zM0 13a1.003 1.003 0 001.71.71L4 11.41l2.29 2.29c.18.19.43.3.71.3a1.003 1.003 0 00.71-1.71L5.41 10 7.7 7.71c.19-.18.3-.43.3-.71a1.003 1.003 0 00-1.71-.71L4 8.59l-2.29-2.3A1.003 1.003 0 00.29 7.71L2.59 10 .3 12.29c-.19.18-.3.43-.3.71zm18-5h-7c-1.1 0-2 .9-2 2s.9 2 2 2h7c1.1 0 2-.9 2-2s-.9-2-2-2zm1 9H1c-.55 0-1 .45-1 1s.45 1 1 1h18c.55 0 1-.45 1-1s-.45-1-1-1z"
                  fillRule="evenodd"
                  key="0"
                />
              </svg>
            </span>
          </Blueprint3.Icon>
        </div>
        <Component>
          <h4
            className="bp3-heading"
          >
            No data for selected station
          </h4>
        </Component>
        <div>
          There appears to be no data for station
        </div>
      </div>
    </Blueprint3.NonIdealState>
  </div>
</StationPropertiesPanel>
`;
