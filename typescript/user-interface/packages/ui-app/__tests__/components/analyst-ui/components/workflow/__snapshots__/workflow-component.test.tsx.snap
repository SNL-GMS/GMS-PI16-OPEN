// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Workflow Component matches snapshot 1`] = `
<WorkflowComponent
  glContainer={
    Object {
      "close": [MockFunction],
      "emit": [MockFunction],
      "extendState": [MockFunction],
      "getElement": [MockFunction],
      "getState": [MockFunction],
      "height": 1200,
      "hide": [MockFunction],
      "isHidden": false,
      "layoutManager": undefined,
      "off": [MockFunction],
      "on": [MockFunction],
      "parent": undefined,
      "setSize": [MockFunction],
      "setState": [MockFunction],
      "setTitle": [MockFunction],
      "show": [MockFunction],
      "tab": undefined,
      "title": "workflow",
      "trigger": [MockFunction],
      "unbind": [MockFunction],
      "width": 1900,
    }
  }
>
  <BaseDisplay
    className="workflow-display-window gms-body-text"
    glContainer={
      Object {
        "close": [MockFunction],
        "emit": [MockFunction],
        "extendState": [MockFunction],
        "getElement": [MockFunction],
        "getState": [MockFunction],
        "height": 1200,
        "hide": [MockFunction],
        "isHidden": false,
        "layoutManager": undefined,
        "off": [MockFunction],
        "on": [MockFunction],
        "parent": undefined,
        "setSize": [MockFunction],
        "setState": [MockFunction],
        "setTitle": [MockFunction],
        "show": [MockFunction],
        "tab": undefined,
        "title": "workflow",
        "trigger": [MockFunction],
        "unbind": [MockFunction],
        "width": 1900,
      }
    }
  >
    <div
      className="base-display workflow-display-window gms-body-text"
    >
      <WrappedWithNonIdealStateChecker
        operationalTimePeriodConfigurationQuery={
          Object {
            "canFetchMore": undefined,
            "clear": [Function],
            "data": undefined,
            "error": null,
            "failureCount": 0,
            "fetchMore": [Function],
            "isError": false,
            "isFetched": false,
            "isFetchedAfterMount": false,
            "isFetching": true,
            "isFetchingMore": false,
            "isIdle": false,
            "isInitialData": true,
            "isLoading": true,
            "isPlaceholderData": false,
            "isPreviousData": false,
            "isStale": true,
            "isSuccess": false,
            "refetch": [Function],
            "remove": [Function],
            "status": "loading",
            "updatedAt": 1606818240000,
          }
        }
        timeRange={
          Object {
            "endTimeSecs": undefined,
            "startTimeSecs": NaN,
          }
        }
        workflowIntervalQuery={
          Object {
            "canFetchMore": undefined,
            "clear": [Function],
            "data": undefined,
            "error": null,
            "failureCount": 0,
            "fetchMore": [Function],
            "isError": false,
            "isFetched": false,
            "isFetchedAfterMount": false,
            "isFetching": false,
            "isFetchingMore": false,
            "isIdle": true,
            "isInitialData": true,
            "isLoading": false,
            "isPlaceholderData": false,
            "isPreviousData": false,
            "isStale": true,
            "isSuccess": false,
            "refetch": [Function],
            "remove": [Function],
            "status": "idle",
            "updatedAt": 1606818240000,
          }
        }
        workflowQuery={
          Object {
            "canFetchMore": undefined,
            "clear": [Function],
            "data": undefined,
            "error": null,
            "failureCount": 0,
            "fetchMore": [Function],
            "isError": false,
            "isFetched": false,
            "isFetchedAfterMount": false,
            "isFetching": true,
            "isFetchingMore": false,
            "isIdle": false,
            "isInitialData": true,
            "isLoading": true,
            "isPlaceholderData": false,
            "isPreviousData": false,
            "isStale": true,
            "isSuccess": false,
            "refetch": [Function],
            "remove": [Function],
            "status": "loading",
            "updatedAt": 1606818240000,
          }
        }
      >
        <Blueprint3.NonIdealState
          action={
            <Blueprint3.Spinner
              intent="primary"
            />
          }
          description="Operational Time Period Configuration"
          title="Loading"
        >
          <div
            className="bp3-non-ideal-state"
          >
            <Component>
              <h4
                className="bp3-heading"
              >
                Loading
              </h4>
            </Component>
            <div>
              Operational Time Period Configuration
            </div>
            <Blueprint3.Spinner
              intent="primary"
            >
              <div
                className="bp3-spinner bp3-intent-primary"
              >
                <div
                  className="bp3-spinner-animation"
                >
                  <svg
                    height={50}
                    strokeWidth="8.00"
                    viewBox="1.00 1.00 98.00 98.00"
                    width={50}
                  >
                    <path
                      className="bp3-spinner-track"
                      d="M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90"
                    />
                    <path
                      className="bp3-spinner-head"
                      d="M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90"
                      pathLength={280}
                      strokeDasharray="280 280"
                      strokeDashoffset={210}
                    />
                  </svg>
                </div>
              </div>
            </Blueprint3.Spinner>
          </div>
        </Blueprint3.NonIdealState>
      </WrappedWithNonIdealStateChecker>
    </div>
  </BaseDisplay>
</WorkflowComponent>
`;
