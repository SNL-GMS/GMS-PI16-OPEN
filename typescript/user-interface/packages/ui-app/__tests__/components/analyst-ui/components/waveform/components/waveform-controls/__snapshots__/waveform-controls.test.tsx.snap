// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WaveformControls matches a snapshot when given basic props 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Memo(InternalWaveformControls)
    alignWaveformsOn="Time"
    alignablePhases={Array []}
    amplitudeScaleOption="Auto"
    analystNumberOfWaveforms={20}
    currentOpenEventId="TEST_EVENT_ID"
    currentSortType="Station Name"
    defaultSignalDetectionPhase="P"
    fixedScaleVal={1}
    isMeasureWindowVisible={false}
    maskDisplayFilters={
      Object {
        "ANALYST_DEFINED": Object {
          "color": "tomato",
          "name": "ANALYST_DEFINED",
          "visible": false,
        },
        "CHANNEL_PROCESSING": Object {
          "color": "tomato",
          "name": "CHANNEL_PROCESSING",
          "visible": false,
        },
        "DATA_AUTHENTICATION": Object {
          "color": "tomato",
          "name": "DATA_AUTHENTICATION",
          "visible": false,
        },
        "REJECTED": Object {
          "color": "tomato",
          "name": "REJECTED",
          "visible": false,
        },
        "STATION_SOH": Object {
          "color": "tomato",
          "name": "STATION_SOH",
          "visible": false,
        },
        "WAVEFORM_QUALITY": Object {
          "color": "tomato",
          "name": "WAVEFORM_QUALITY",
          "visible": false,
        },
      }
    }
    measurementMode={
      Object {
        "entries": undefined,
        "mode": "Default",
      }
    }
    onKeyPress={[MockFunction]}
    pan={[MockFunction]}
    phaseToAlignOn="P"
    setAmplitudeScaleOption={[MockFunction]}
    setAnalystNumberOfWaveforms={[MockFunction]}
    setDefaultSignalDetectionPhase={[MockFunction]}
    setFixedScaleVal={[MockFunction]}
    setMaskDisplayFilters={[MockFunction]}
    setMode={[MockFunction]}
    setSelectedSortType={[MockFunction]}
    setShowPredictedPhases={[MockFunction]}
    setWaveformAlignment={[MockFunction]}
    showPredictedPhases={false}
    toggleMeasureWindow={[MockFunction]}
  >
    <Memo(InternalWaveformToolbar)
      leftToolbarLeftItems={
        Array [
          Object {
            "buttons": Array [
              Object {
                "disabled": false,
                "icon": "arrow-left",
                "label": "Pan Left",
                "onClick": [Function],
                "onlyShowIcon": true,
                "rank": 2,
                "tooltip": "Pan waveforms to the left",
                "type": "Button",
              },
              Object {
                "disabled": false,
                "icon": "arrow-right",
                "label": "Pan Right",
                "onClick": [Function],
                "onlyShowIcon": true,
                "rank": 3,
                "tooltip": "Pan waveforms to the Right",
                "type": "Button",
              },
            ],
            "label": "Pan",
            "rank": 2,
            "tooltip": "",
            "type": "ButtonGroup",
          },
        ]
      }
      rightToolbarItems={
        Array [
          Object {
            "element": <StationControls
              checkboxItems={Array []}
              setCheckboxItems={[Function]}
            />,
            "label": "Stations",
            "rank": 4,
            "tooltip": "Check a station to display",
            "type": "CustomItem",
          },
          Object {
            "disabled": false,
            "dropdownOptions": Object {
              "DEFAULT": "Default",
              "MEASUREMENT": "Measurement",
            },
            "label": "Mode",
            "onChange": [Function],
            "rank": 7,
            "tooltip": "Set the display mode",
            "type": "Dropdown",
            "value": "Default",
            "widthPx": 130,
          },
          Object {
            "element": <Blueprint3.Popover
              boundary="scrollParent"
              captureDismiss={false}
              content={
                <ScalingOptionSelector
                  ampScaleOption="Auto"
                  fixedScaleOptions={
                    Array [
                      "Current",
                      1,
                      10,
                      100,
                      1000,
                    ]
                  }
                  fixedScaleVal={1}
                  setAmpScaleOption={[MockFunction]}
                  setFixedScaleVal={[MockFunction]}
                />
              }
              defaultIsOpen={false}
              disabled={false}
              fill={false}
              hasBackdrop={false}
              hoverCloseDelay={300}
              hoverOpenDelay={150}
              inheritDarkTheme={true}
              interactionKind="click"
              minimal={false}
              modifiers={Object {}}
              openOnTargetFocus={true}
              position="auto"
              targetTagName="span"
              transitionDuration={300}
              usePortal={true}
              wrapperTagName="span"
            >
              <Blueprint3.Button
                alignText="left"
                rightIcon="caret-down"
                style={
                  Object {
                    "width": 72,
                  }
                }
                title="Waveform amplitude scaling options"
                value="Auto"
              >
                Auto
              </Blueprint3.Button>
            </Blueprint3.Popover>,
            "label": "Amp Scale",
            "rank": 6,
            "tooltip": "Amplitude Scaling",
            "type": "CustomItem",
          },
          Object {
            "disabled": true,
            "label": "P",
            "menuLabel": "Default Phase",
            "onPopoverDismissed": [Function],
            "popoverContent": <PhaseSelectionMenu
              onBlur={[Function]}
              onEnterForPhases={[Function]}
              onPhaseClicked={[Function]}
              phase="P"
              prioritySdPhases={
                Array [
                  "P",
                  "S",
                ]
              }
              sdPhases={
                Array [
                  "P",
                  "S",
                  "P3KPbc",
                  "P4KPdf_B",
                  "P7KPbc",
                  "P7KPdf_D",
                  "PKiKP",
                  "PKKSab",
                  "PKP2bc",
                  "PKP3df_B",
                  "PKSab",
                  "PP_1",
                  "pPKPbc",
                  "PS",
                  "Rg",
                  "SKiKP",
                  "SKKSac",
                  "SKPdf",
                  "SKSdf",
                  "sPdiff",
                  "SS",
                  "sSKSdf",
                  "Lg",
                  "P3KPbc_B",
                  "P5KPbc",
                  "P7KPbc_B",
                  "Pb",
                  "PKKP",
                  "PKKSbc",
                  "PKP2df",
                  "PKPab",
                  "PKSbc",
                  "PP_B",
                  "pPKPdf",
                  "PS_1",
                  "SKKP",
                  "SKKSac_B",
                  "SKS",
                  "SKSSKS",
                  "sPKiKP",
                  "SS_1",
                  "SSS",
                  "nNL",
                  "P3KPdf",
                  "P5KPbc_B",
                  "P7KPbc_C",
                  "PcP",
                  "PKKPab",
                  "PKKSdf",
                  "PKP3",
                  "PKPbc",
                  "PKSdf",
                  "pPdiff",
                  "PPP",
                  "pSdiff",
                  "Sb",
                  "SKKPab",
                  "SKKSdf",
                  "SKS2",
                  "Sn",
                  "sPKP",
                  "SS_B",
                  "SSS_B",
                  "NP",
                  "P3KPdf_B",
                  "P5KPdf",
                  "P7KPdf",
                  "PcS",
                  "PKKPbc",
                  "PKP",
                  "PKP3ab",
                  "PKPdf",
                  "Pn",
                  "pPKiKP",
                  "PPP_B",
                  "pSKS",
                  "ScP",
                  "SKKPbc",
                  "SKP",
                  "SKS2ac",
                  "SnSn",
                  "sPKPab",
                  "sSdiff",
                  "NP_1",
                  "P4KPbc",
                  "P5KPdf_B",
                  "P7KPdf_B",
                  "Pdiff",
                  "PKKPdf",
                  "PKP2",
                  "PKP3bc",
                  "PKPPKP",
                  "PnPn",
                  "pPKP",
                  "PPS",
                  "pSKSac",
                  "ScS",
                  "SKKPdf",
                  "SKPab",
                  "SKS2df",
                  "SP",
                  "sPKPbc",
                  "sSKS",
                  "P4KPdf",
                  "P5KPdf_C",
                  "P7KPdf_C",
                  "Pg",
                  "PKKS",
                  "PKP2ab",
                  "PKP3df",
                  "PKS",
                  "PP",
                  "pPKPab",
                  "PPS_B",
                  "pSKSdf",
                  "Sdiff",
                  "SKKS",
                  "SKPbc",
                  "SKSac",
                  "SP_1",
                  "sPKPdf",
                  "sSKSac",
                  "Sx",
                  "tx",
                  "N",
                  "Px",
                  "PKhKP",
                  "LR",
                ]
              }
            />,
            "rank": 8,
            "tooltip": "Set default phase of new signal detections",
            "type": "Popover",
            "widthPx": 88,
          },
          Object {
            "menuLabel": "Number of Channels",
            "minMax": Object {
              "max": 100,
              "min": 1,
            },
            "onChange": [Function],
            "rank": 5,
            "tooltip": "Sets the number of visible channels per screen",
            "type": "NumericInput",
            "value": 20,
          },
          Object {
            "disabled": false,
            "label": "Time",
            "menuLabel": "Alignment",
            "onPopoverDismissed": [Function],
            "popoverContent": <AlignmentMenu
              alignedOn="Time"
              onSubmit={[Function]}
              phaseAlignedOn="P"
              prioritySdPhases={Array []}
              sdPhases={Array []}
            />,
            "rank": 9,
            "tooltip": "Align waveforms to time or phase",
            "type": "Popover",
            "widthPx": 154,
          },
          Object {
            "disabled": false,
            "dropdownOptions": Object {
              "distance": "Distance",
              "stationName": "Station Name",
            },
            "label": "Station Sort",
            "onChange": [Function],
            "rank": 10,
            "tooltip": "Set the sort order of stations",
            "type": "Dropdown",
            "value": "Station Name",
            "widthPx": 130,
          },
          Object {
            "cyData": "Predicted Phases",
            "disabled": true,
            "label": "Predicted Phases",
            "menuLabel": "Show Predicted Phases",
            "onChange": [Function],
            "rank": 11,
            "tooltip": "Show/Hide predicted phases",
            "type": "Switch",
            "value": false,
          },
          Object {
            "disabled": true,
            "label": "QC Masks",
            "onPopoverDismissed": [Function],
            "popoverContent": <QcMaskFilter
              maskDisplayFilters={
                Object {
                  "ANALYST_DEFINED": Object {
                    "color": "tomato",
                    "name": "ANALYST_DEFINED",
                    "visible": false,
                  },
                  "CHANNEL_PROCESSING": Object {
                    "color": "tomato",
                    "name": "CHANNEL_PROCESSING",
                    "visible": false,
                  },
                  "DATA_AUTHENTICATION": Object {
                    "color": "tomato",
                    "name": "DATA_AUTHENTICATION",
                    "visible": false,
                  },
                  "REJECTED": Object {
                    "color": "tomato",
                    "name": "REJECTED",
                    "visible": false,
                  },
                  "STATION_SOH": Object {
                    "color": "tomato",
                    "name": "STATION_SOH",
                    "visible": false,
                  },
                  "WAVEFORM_QUALITY": Object {
                    "color": "tomato",
                    "name": "WAVEFORM_QUALITY",
                    "visible": false,
                  },
                }
              }
              setMaskDisplayFilters={[MockFunction]}
            />,
            "rank": 12,
            "tooltip": "Show/Hide categories of QC masks",
            "type": "Popover",
            "widthPx": 110,
          },
          Object {
            "disabled": false,
            "label": "Measure Window",
            "menuLabel": "Show Measure Window",
            "onChange": [Function],
            "rank": 13,
            "tooltip": "Show/Hide Measure Window",
            "type": "Switch",
            "value": false,
          },
        ]
      }
      widthPx={1920}
    >
      <div
        className="waveform-display-control-panel"
      >
        <ToolbarComponent
          items={
            Array [
              Object {
                "element": <StationControls
                  checkboxItems={Array []}
                  setCheckboxItems={[Function]}
                />,
                "label": "Stations",
                "rank": 4,
                "tooltip": "Check a station to display",
                "type": "CustomItem",
              },
              Object {
                "disabled": false,
                "dropdownOptions": Object {
                  "DEFAULT": "Default",
                  "MEASUREMENT": "Measurement",
                },
                "label": "Mode",
                "onChange": [Function],
                "rank": 7,
                "tooltip": "Set the display mode",
                "type": "Dropdown",
                "value": "Default",
                "widthPx": 130,
              },
              Object {
                "element": <Blueprint3.Popover
                  boundary="scrollParent"
                  captureDismiss={false}
                  content={
                    <ScalingOptionSelector
                      ampScaleOption="Auto"
                      fixedScaleOptions={
                        Array [
                          "Current",
                          1,
                          10,
                          100,
                          1000,
                        ]
                      }
                      fixedScaleVal={1}
                      setAmpScaleOption={[MockFunction]}
                      setFixedScaleVal={[MockFunction]}
                    />
                  }
                  defaultIsOpen={false}
                  disabled={false}
                  fill={false}
                  hasBackdrop={false}
                  hoverCloseDelay={300}
                  hoverOpenDelay={150}
                  inheritDarkTheme={true}
                  interactionKind="click"
                  minimal={false}
                  modifiers={Object {}}
                  openOnTargetFocus={true}
                  position="auto"
                  targetTagName="span"
                  transitionDuration={300}
                  usePortal={true}
                  wrapperTagName="span"
                >
                  <Blueprint3.Button
                    alignText="left"
                    rightIcon="caret-down"
                    style={
                      Object {
                        "width": 72,
                      }
                    }
                    title="Waveform amplitude scaling options"
                    value="Auto"
                  >
                    Auto
                  </Blueprint3.Button>
                </Blueprint3.Popover>,
                "label": "Amp Scale",
                "rank": 6,
                "tooltip": "Amplitude Scaling",
                "type": "CustomItem",
              },
              Object {
                "disabled": true,
                "label": "P",
                "menuLabel": "Default Phase",
                "onPopoverDismissed": [Function],
                "popoverContent": <PhaseSelectionMenu
                  onBlur={[Function]}
                  onEnterForPhases={[Function]}
                  onPhaseClicked={[Function]}
                  phase="P"
                  prioritySdPhases={
                    Array [
                      "P",
                      "S",
                    ]
                  }
                  sdPhases={
                    Array [
                      "P",
                      "S",
                      "P3KPbc",
                      "P4KPdf_B",
                      "P7KPbc",
                      "P7KPdf_D",
                      "PKiKP",
                      "PKKSab",
                      "PKP2bc",
                      "PKP3df_B",
                      "PKSab",
                      "PP_1",
                      "pPKPbc",
                      "PS",
                      "Rg",
                      "SKiKP",
                      "SKKSac",
                      "SKPdf",
                      "SKSdf",
                      "sPdiff",
                      "SS",
                      "sSKSdf",
                      "Lg",
                      "P3KPbc_B",
                      "P5KPbc",
                      "P7KPbc_B",
                      "Pb",
                      "PKKP",
                      "PKKSbc",
                      "PKP2df",
                      "PKPab",
                      "PKSbc",
                      "PP_B",
                      "pPKPdf",
                      "PS_1",
                      "SKKP",
                      "SKKSac_B",
                      "SKS",
                      "SKSSKS",
                      "sPKiKP",
                      "SS_1",
                      "SSS",
                      "nNL",
                      "P3KPdf",
                      "P5KPbc_B",
                      "P7KPbc_C",
                      "PcP",
                      "PKKPab",
                      "PKKSdf",
                      "PKP3",
                      "PKPbc",
                      "PKSdf",
                      "pPdiff",
                      "PPP",
                      "pSdiff",
                      "Sb",
                      "SKKPab",
                      "SKKSdf",
                      "SKS2",
                      "Sn",
                      "sPKP",
                      "SS_B",
                      "SSS_B",
                      "NP",
                      "P3KPdf_B",
                      "P5KPdf",
                      "P7KPdf",
                      "PcS",
                      "PKKPbc",
                      "PKP",
                      "PKP3ab",
                      "PKPdf",
                      "Pn",
                      "pPKiKP",
                      "PPP_B",
                      "pSKS",
                      "ScP",
                      "SKKPbc",
                      "SKP",
                      "SKS2ac",
                      "SnSn",
                      "sPKPab",
                      "sSdiff",
                      "NP_1",
                      "P4KPbc",
                      "P5KPdf_B",
                      "P7KPdf_B",
                      "Pdiff",
                      "PKKPdf",
                      "PKP2",
                      "PKP3bc",
                      "PKPPKP",
                      "PnPn",
                      "pPKP",
                      "PPS",
                      "pSKSac",
                      "ScS",
                      "SKKPdf",
                      "SKPab",
                      "SKS2df",
                      "SP",
                      "sPKPbc",
                      "sSKS",
                      "P4KPdf",
                      "P5KPdf_C",
                      "P7KPdf_C",
                      "Pg",
                      "PKKS",
                      "PKP2ab",
                      "PKP3df",
                      "PKS",
                      "PP",
                      "pPKPab",
                      "PPS_B",
                      "pSKSdf",
                      "Sdiff",
                      "SKKS",
                      "SKPbc",
                      "SKSac",
                      "SP_1",
                      "sPKPdf",
                      "sSKSac",
                      "Sx",
                      "tx",
                      "N",
                      "Px",
                      "PKhKP",
                      "LR",
                    ]
                  }
                />,
                "rank": 8,
                "tooltip": "Set default phase of new signal detections",
                "type": "Popover",
                "widthPx": 88,
              },
              Object {
                "menuLabel": "Number of Channels",
                "minMax": Object {
                  "max": 100,
                  "min": 1,
                },
                "onChange": [Function],
                "rank": 5,
                "tooltip": "Sets the number of visible channels per screen",
                "type": "NumericInput",
                "value": 20,
              },
              Object {
                "disabled": false,
                "label": "Time",
                "menuLabel": "Alignment",
                "onPopoverDismissed": [Function],
                "popoverContent": <AlignmentMenu
                  alignedOn="Time"
                  onSubmit={[Function]}
                  phaseAlignedOn="P"
                  prioritySdPhases={Array []}
                  sdPhases={Array []}
                />,
                "rank": 9,
                "tooltip": "Align waveforms to time or phase",
                "type": "Popover",
                "widthPx": 154,
              },
              Object {
                "disabled": false,
                "dropdownOptions": Object {
                  "distance": "Distance",
                  "stationName": "Station Name",
                },
                "label": "Station Sort",
                "onChange": [Function],
                "rank": 10,
                "tooltip": "Set the sort order of stations",
                "type": "Dropdown",
                "value": "Station Name",
                "widthPx": 130,
              },
              Object {
                "cyData": "Predicted Phases",
                "disabled": true,
                "label": "Predicted Phases",
                "menuLabel": "Show Predicted Phases",
                "onChange": [Function],
                "rank": 11,
                "tooltip": "Show/Hide predicted phases",
                "type": "Switch",
                "value": false,
              },
              Object {
                "disabled": true,
                "label": "QC Masks",
                "onPopoverDismissed": [Function],
                "popoverContent": <QcMaskFilter
                  maskDisplayFilters={
                    Object {
                      "ANALYST_DEFINED": Object {
                        "color": "tomato",
                        "name": "ANALYST_DEFINED",
                        "visible": false,
                      },
                      "CHANNEL_PROCESSING": Object {
                        "color": "tomato",
                        "name": "CHANNEL_PROCESSING",
                        "visible": false,
                      },
                      "DATA_AUTHENTICATION": Object {
                        "color": "tomato",
                        "name": "DATA_AUTHENTICATION",
                        "visible": false,
                      },
                      "REJECTED": Object {
                        "color": "tomato",
                        "name": "REJECTED",
                        "visible": false,
                      },
                      "STATION_SOH": Object {
                        "color": "tomato",
                        "name": "STATION_SOH",
                        "visible": false,
                      },
                      "WAVEFORM_QUALITY": Object {
                        "color": "tomato",
                        "name": "WAVEFORM_QUALITY",
                        "visible": false,
                      },
                    }
                  }
                  setMaskDisplayFilters={[MockFunction]}
                />,
                "rank": 12,
                "tooltip": "Show/Hide categories of QC masks",
                "type": "Popover",
                "widthPx": 110,
              },
              Object {
                "disabled": false,
                "label": "Measure Window",
                "menuLabel": "Show Measure Window",
                "onChange": [Function],
                "rank": 13,
                "tooltip": "Show/Hide Measure Window",
                "type": "Switch",
                "value": false,
              },
            ]
          }
          itemsLeft={
            Array [
              Object {
                "buttons": Array [
                  Object {
                    "disabled": false,
                    "icon": "arrow-left",
                    "label": "Pan Left",
                    "onClick": [Function],
                    "onlyShowIcon": true,
                    "rank": 2,
                    "tooltip": "Pan waveforms to the left",
                    "type": "Button",
                  },
                  Object {
                    "disabled": false,
                    "icon": "arrow-right",
                    "label": "Pan Right",
                    "onClick": [Function],
                    "onlyShowIcon": true,
                    "rank": 3,
                    "tooltip": "Pan waveforms to the Right",
                    "type": "Button",
                  },
                ],
                "label": "Pan",
                "rank": 2,
                "tooltip": "",
                "type": "ButtonGroup",
              },
            ]
          }
          toolbarWidthPx={1904}
        >
          <div
            className="toolbar"
            style={
              Object {
                "width": "1904px",
              }
            }
          >
            <div
              className="toolbar__left-group"
            >
              <div
                className="toolbar-item toolbar-item__left"
                key="2"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "buttons": Array [
                        Object {
                          "disabled": false,
                          "icon": "arrow-left",
                          "label": "Pan Left",
                          "onClick": [Function],
                          "onlyShowIcon": true,
                          "rank": 2,
                          "tooltip": "Pan waveforms to the left",
                          "type": "Button",
                        },
                        Object {
                          "disabled": false,
                          "icon": "arrow-right",
                          "label": "Pan Right",
                          "onClick": [Function],
                          "onlyShowIcon": true,
                          "rank": 3,
                          "tooltip": "Pan waveforms to the Right",
                          "type": "Button",
                        },
                      ],
                      "label": "Pan",
                      "rank": 2,
                      "tooltip": "",
                      "type": "ButtonGroup",
                    }
                  }
                  key="2"
                >
                  <div
                    className="toolbar-button-group"
                    key="2"
                    style={Object {}}
                  >
                    <div
                      key="2"
                      style={Object {}}
                    >
                      <Blueprint3.Button
                        alignText="center"
                        className="toolbar-button--icon-only"
                        disabled={false}
                        key="2"
                        onClick={[Function]}
                        onMouseEnter={[Function]}
                        onMouseOut={[Function]}
                        style={
                          Object {
                            "marginRight": "2px",
                            "width": "30px",
                          }
                        }
                        title="Pan waveforms to the left"
                      >
                        <button
                          className="bp3-button toolbar-button--icon-only"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseEnter={[Function]}
                          onMouseOut={[Function]}
                          style={
                            Object {
                              "marginRight": "2px",
                              "width": "30px",
                            }
                          }
                          title="Pan waveforms to the left"
                          type="button"
                        >
                          <Blueprint3.Icon
                            key="leftIcon"
                          />
                          <span
                            className="bp3-button-text"
                            key="text"
                          >
                            <Blueprint3.Icon
                              icon="arrow-left"
                              key="2"
                              title={false}
                            >
                              <span
                                className="bp3-icon bp3-icon-arrow-left"
                                icon="arrow-left"
                              >
                                <svg
                                  data-icon="arrow-left"
                                  height={16}
                                  viewBox="0 0 16 16"
                                  width={16}
                                >
                                  <path
                                    d="M13.99 6.99H4.41L7.7 3.7a1.003 1.003 0 00-1.42-1.42l-5 5a1.014 1.014 0 000 1.42l5 5a1.003 1.003 0 001.42-1.42L4.41 8.99H14c.55 0 1-.45 1-1s-.46-1-1.01-1z"
                                    fillRule="evenodd"
                                    key="0"
                                  />
                                </svg>
                              </span>
                            </Blueprint3.Icon>
                          </span>
                          <Blueprint3.Icon
                            key="rightIcon"
                          />
                        </button>
                      </Blueprint3.Button>
                    </div>
                    <div
                      key="3"
                      style={Object {}}
                    >
                      <Blueprint3.Button
                        alignText="center"
                        className="toolbar-button--icon-only"
                        disabled={false}
                        key="3"
                        onClick={[Function]}
                        onMouseEnter={[Function]}
                        onMouseOut={[Function]}
                        style={
                          Object {
                            "marginRight": undefined,
                            "width": "30px",
                          }
                        }
                        title="Pan waveforms to the Right"
                      >
                        <button
                          className="bp3-button toolbar-button--icon-only"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseEnter={[Function]}
                          onMouseOut={[Function]}
                          style={
                            Object {
                              "marginRight": undefined,
                              "width": "30px",
                            }
                          }
                          title="Pan waveforms to the Right"
                          type="button"
                        >
                          <Blueprint3.Icon
                            key="leftIcon"
                          />
                          <span
                            className="bp3-button-text"
                            key="text"
                          >
                            <Blueprint3.Icon
                              icon="arrow-right"
                              key="2"
                              title={false}
                            >
                              <span
                                className="bp3-icon bp3-icon-arrow-right"
                                icon="arrow-right"
                              >
                                <svg
                                  data-icon="arrow-right"
                                  height={16}
                                  viewBox="0 0 16 16"
                                  width={16}
                                >
                                  <path
                                    d="M14.7 7.29l-5-5a.965.965 0 00-.71-.3 1.003 1.003 0 00-.71 1.71l3.29 3.29H1.99c-.55 0-1 .45-1 1s.45 1 1 1h9.59l-3.29 3.29a1.003 1.003 0 001.42 1.42l5-5c.18-.18.29-.43.29-.71s-.12-.52-.3-.7z"
                                    fillRule="evenodd"
                                    key="0"
                                  />
                                </svg>
                              </span>
                            </Blueprint3.Icon>
                          </span>
                          <Blueprint3.Icon
                            key="rightIcon"
                          />
                        </button>
                      </Blueprint3.Button>
                    </div>
                  </div>
                </ToolbarItemRenderer>
              </div>
            </div>
            <div
              className="toolbar__center-group"
            >
              <div
                className="toolbar__whitespace"
                style={
                  Object {
                    "width": "1888px",
                  }
                }
              />
            </div>
            <div
              className="toolbar__right-group"
            >
              <div
                className="toolbar-item
                    "
                key="4"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "element": <StationControls
                        checkboxItems={Array []}
                        setCheckboxItems={[Function]}
                      />,
                      "label": "Stations",
                      "rank": 4,
                      "tooltip": "Check a station to display",
                      "type": "CustomItem",
                    }
                  }
                  key="4"
                >
                  <StationControls
                    checkboxItems={Array []}
                    setCheckboxItems={[Function]}
                  >
                    <Blueprint3.Popover
                      boundary="scrollParent"
                      captureDismiss={false}
                      content={
                        <CheckboxSearchList
                          items={Array []}
                          maxHeightPx={200}
                          onCheckboxChecked={[Function]}
                        />
                      }
                      defaultIsOpen={false}
                      disabled={false}
                      fill={false}
                      hasBackdrop={false}
                      hoverCloseDelay={300}
                      hoverOpenDelay={150}
                      inheritDarkTheme={true}
                      interactionKind="click"
                      minimal={false}
                      modifiers={Object {}}
                      openOnTargetFocus={true}
                      position="auto"
                      targetTagName="span"
                      transitionDuration={300}
                      usePortal={true}
                      wrapperTagName="span"
                    >
                      <Manager>
                        <span
                          className="bp3-popover-wrapper"
                        >
                          <Reference
                            innerRef={[Function]}
                          >
                            <InnerReference
                              innerRef={[Function]}
                              setReferenceNode={[Function]}
                            >
                              <Blueprint3.ResizeSensor
                                onResize={[Function]}
                              >
                                <span
                                  className="bp3-popover-target"
                                  onClick={[Function]}
                                >
                                  <Blueprint3.Button
                                    alignText="left"
                                    className=""
                                    key=".0"
                                    rightIcon="caret-down"
                                    style={
                                      Object {
                                        "width": 94,
                                      }
                                    }
                                    title="Select stations to be shown"
                                    value="Stations"
                                  >
                                    <button
                                      className="bp3-button bp3-align-left"
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      style={
                                        Object {
                                          "width": 94,
                                        }
                                      }
                                      title="Select stations to be shown"
                                      type="button"
                                      value="Stations"
                                    >
                                      <Blueprint3.Icon
                                        key="leftIcon"
                                      />
                                      <span
                                        className="bp3-button-text"
                                        key="text"
                                      >
                                        Stations
                                      </span>
                                      <Blueprint3.Icon
                                        icon="caret-down"
                                        key="rightIcon"
                                      >
                                        <span
                                          className="bp3-icon bp3-icon-caret-down"
                                          icon="caret-down"
                                        >
                                          <svg
                                            data-icon="caret-down"
                                            height={16}
                                            viewBox="0 0 16 16"
                                            width={16}
                                          >
                                            <desc>
                                              caret-down
                                            </desc>
                                            <path
                                              d="M12 6.5c0-.28-.22-.5-.5-.5h-7a.495.495 0 00-.37.83l3.5 4c.09.1.22.17.37.17s.28-.07.37-.17l3.5-4c.08-.09.13-.2.13-.33z"
                                              fillRule="evenodd"
                                              key="0"
                                            />
                                          </svg>
                                        </span>
                                      </Blueprint3.Icon>
                                    </button>
                                  </Blueprint3.Button>
                                </span>
                              </Blueprint3.ResizeSensor>
                            </InnerReference>
                          </Reference>
                          <Blueprint3.Overlay
                            autoFocus={true}
                            backdropClassName="bp3-popover-backdrop"
                            backdropProps={Object {}}
                            canEscapeKeyClose={true}
                            canOutsideClickClose={true}
                            enforceFocus={true}
                            hasBackdrop={false}
                            isOpen={false}
                            lazy={true}
                            onClose={[Function]}
                            transitionDuration={300}
                            transitionName="bp3-popover"
                            usePortal={true}
                          />
                        </span>
                      </Manager>
                    </Blueprint3.Popover>
                  </StationControls>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="5"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "menuLabel": "Number of Channels",
                      "minMax": Object {
                        "max": 100,
                        "min": 1,
                      },
                      "onChange": [Function],
                      "rank": 5,
                      "tooltip": "Sets the number of visible channels per screen",
                      "type": "NumericInput",
                      "value": 20,
                    }
                  }
                  key="5"
                >
                  <div
                    style={Object {}}
                  >
                    <span
                      key="5"
                    >
                      <NumericInput
                        minMax={
                          Object {
                            "max": 100,
                            "min": 1,
                          }
                        }
                        onChange={[Function]}
                        tooltip="Sets the number of visible channels per screen"
                        value={20}
                      >
                        <input
                          className="toolbar-numeric-input"
                          max={100}
                          min={1}
                          onChange={[Function]}
                          onKeyDown={[Function]}
                          onMouseEnter={[Function]}
                          step={1}
                          title="Sets the number of visible channels per screen"
                          type="number"
                          value={20}
                        />
                      </NumericInput>
                    </span>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="6"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "element": <Blueprint3.Popover
                        boundary="scrollParent"
                        captureDismiss={false}
                        content={
                          <ScalingOptionSelector
                            ampScaleOption="Auto"
                            fixedScaleOptions={
                              Array [
                                "Current",
                                1,
                                10,
                                100,
                                1000,
                              ]
                            }
                            fixedScaleVal={1}
                            setAmpScaleOption={[MockFunction]}
                            setFixedScaleVal={[MockFunction]}
                          />
                        }
                        defaultIsOpen={false}
                        disabled={false}
                        fill={false}
                        hasBackdrop={false}
                        hoverCloseDelay={300}
                        hoverOpenDelay={150}
                        inheritDarkTheme={true}
                        interactionKind="click"
                        minimal={false}
                        modifiers={Object {}}
                        openOnTargetFocus={true}
                        position="auto"
                        targetTagName="span"
                        transitionDuration={300}
                        usePortal={true}
                        wrapperTagName="span"
                      >
                        <Blueprint3.Button
                          alignText="left"
                          rightIcon="caret-down"
                          style={
                            Object {
                              "width": 72,
                            }
                          }
                          title="Waveform amplitude scaling options"
                          value="Auto"
                        >
                          Auto
                        </Blueprint3.Button>
                      </Blueprint3.Popover>,
                      "label": "Amp Scale",
                      "rank": 6,
                      "tooltip": "Amplitude Scaling",
                      "type": "CustomItem",
                    }
                  }
                  key="6"
                >
                  <Blueprint3.Popover
                    boundary="scrollParent"
                    captureDismiss={false}
                    content={
                      <ScalingOptionSelector
                        ampScaleOption="Auto"
                        fixedScaleOptions={
                          Array [
                            "Current",
                            1,
                            10,
                            100,
                            1000,
                          ]
                        }
                        fixedScaleVal={1}
                        setAmpScaleOption={[MockFunction]}
                        setFixedScaleVal={[MockFunction]}
                      />
                    }
                    defaultIsOpen={false}
                    disabled={false}
                    fill={false}
                    hasBackdrop={false}
                    hoverCloseDelay={300}
                    hoverOpenDelay={150}
                    inheritDarkTheme={true}
                    interactionKind="click"
                    minimal={false}
                    modifiers={Object {}}
                    openOnTargetFocus={true}
                    position="auto"
                    targetTagName="span"
                    transitionDuration={300}
                    usePortal={true}
                    wrapperTagName="span"
                  >
                    <Manager>
                      <span
                        className="bp3-popover-wrapper"
                      >
                        <Reference
                          innerRef={[Function]}
                        >
                          <InnerReference
                            innerRef={[Function]}
                            setReferenceNode={[Function]}
                          >
                            <Blueprint3.ResizeSensor
                              onResize={[Function]}
                            >
                              <span
                                className="bp3-popover-target"
                                onClick={[Function]}
                              >
                                <Blueprint3.Button
                                  alignText="left"
                                  className=""
                                  key=".0"
                                  rightIcon="caret-down"
                                  style={
                                    Object {
                                      "width": 72,
                                    }
                                  }
                                  title="Waveform amplitude scaling options"
                                  value="Auto"
                                >
                                  <button
                                    className="bp3-button bp3-align-left"
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    style={
                                      Object {
                                        "width": 72,
                                      }
                                    }
                                    title="Waveform amplitude scaling options"
                                    type="button"
                                    value="Auto"
                                  >
                                    <Blueprint3.Icon
                                      key="leftIcon"
                                    />
                                    <span
                                      className="bp3-button-text"
                                      key="text"
                                    >
                                      Auto
                                    </span>
                                    <Blueprint3.Icon
                                      icon="caret-down"
                                      key="rightIcon"
                                    >
                                      <span
                                        className="bp3-icon bp3-icon-caret-down"
                                        icon="caret-down"
                                      >
                                        <svg
                                          data-icon="caret-down"
                                          height={16}
                                          viewBox="0 0 16 16"
                                          width={16}
                                        >
                                          <desc>
                                            caret-down
                                          </desc>
                                          <path
                                            d="M12 6.5c0-.28-.22-.5-.5-.5h-7a.495.495 0 00-.37.83l3.5 4c.09.1.22.17.37.17s.28-.07.37-.17l3.5-4c.08-.09.13-.2.13-.33z"
                                            fillRule="evenodd"
                                            key="0"
                                          />
                                        </svg>
                                      </span>
                                    </Blueprint3.Icon>
                                  </button>
                                </Blueprint3.Button>
                              </span>
                            </Blueprint3.ResizeSensor>
                          </InnerReference>
                        </Reference>
                        <Blueprint3.Overlay
                          autoFocus={true}
                          backdropClassName="bp3-popover-backdrop"
                          backdropProps={Object {}}
                          canEscapeKeyClose={true}
                          canOutsideClickClose={true}
                          enforceFocus={true}
                          hasBackdrop={false}
                          isOpen={false}
                          lazy={true}
                          onClose={[Function]}
                          transitionDuration={300}
                          transitionName="bp3-popover"
                          usePortal={true}
                        />
                      </span>
                    </Manager>
                  </Blueprint3.Popover>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="7"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "disabled": false,
                      "dropdownOptions": Object {
                        "DEFAULT": "Default",
                        "MEASUREMENT": "Measurement",
                      },
                      "label": "Mode",
                      "onChange": [Function],
                      "rank": 7,
                      "tooltip": "Set the display mode",
                      "type": "Dropdown",
                      "value": "Default",
                      "widthPx": 130,
                    }
                  }
                  key="7"
                >
                  <div
                    style={Object {}}
                  >
                    <DropDown
                      disabled={false}
                      dropDownItems={
                        Object {
                          "DEFAULT": "Default",
                          "MEASUREMENT": "Measurement",
                        }
                      }
                      key="7"
                      label="Mode"
                      onMaybeValue={[Function]}
                      title="Set the display mode"
                      value="Default"
                      widthPx={130}
                    >
                      <div
                        className="dropdown-container"
                      >
                        <span
                          className="dropdown-selector"
                        >
                          <HTMLSelect
                            disabled={false}
                            onChange={[Function]}
                            style={
                              Object {
                                "minWidth": "130px",
                                "width": "130px",
                              }
                            }
                            title="Set the display mode"
                            value="Default"
                          >
                            <div
                              className="bp3-html-select"
                            >
                              <select
                                disabled={false}
                                multiple={false}
                                onChange={[Function]}
                                style={
                                  Object {
                                    "minWidth": "130px",
                                    "width": "130px",
                                  }
                                }
                                title="Set the display mode"
                                value="Default"
                              >
                                <option
                                  key="DEFAULT"
                                  value="Default"
                                >
                                  Default
                                </option>
                                <option
                                  key="MEASUREMENT"
                                  value="Measurement"
                                >
                                  Measurement
                                </option>
                              </select>
                              <Blueprint3.Icon
                                icon="double-caret-vertical"
                              >
                                <span
                                  className="bp3-icon bp3-icon-double-caret-vertical"
                                  icon="double-caret-vertical"
                                >
                                  <svg
                                    data-icon="double-caret-vertical"
                                    height={16}
                                    viewBox="0 0 16 16"
                                    width={16}
                                  >
                                    <desc>
                                      double-caret-vertical
                                    </desc>
                                    <path
                                      d="M5 7h6a1.003 1.003 0 00.71-1.71l-3-3C8.53 2.11 8.28 2 8 2s-.53.11-.71.29l-3 3A1.003 1.003 0 005 7zm6 2H5a1.003 1.003 0 00-.71 1.71l3 3c.18.18.43.29.71.29s.53-.11.71-.29l3-3A1.003 1.003 0 0011 9z"
                                      fillRule="evenodd"
                                      key="0"
                                    />
                                  </svg>
                                </span>
                              </Blueprint3.Icon>
                            </div>
                          </HTMLSelect>
                        </span>
                      </div>
                    </DropDown>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="8"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "disabled": true,
                      "label": "P",
                      "menuLabel": "Default Phase",
                      "onPopoverDismissed": [Function],
                      "popoverContent": <PhaseSelectionMenu
                        onBlur={[Function]}
                        onEnterForPhases={[Function]}
                        onPhaseClicked={[Function]}
                        phase="P"
                        prioritySdPhases={
                          Array [
                            "P",
                            "S",
                          ]
                        }
                        sdPhases={
                          Array [
                            "P",
                            "S",
                            "P3KPbc",
                            "P4KPdf_B",
                            "P7KPbc",
                            "P7KPdf_D",
                            "PKiKP",
                            "PKKSab",
                            "PKP2bc",
                            "PKP3df_B",
                            "PKSab",
                            "PP_1",
                            "pPKPbc",
                            "PS",
                            "Rg",
                            "SKiKP",
                            "SKKSac",
                            "SKPdf",
                            "SKSdf",
                            "sPdiff",
                            "SS",
                            "sSKSdf",
                            "Lg",
                            "P3KPbc_B",
                            "P5KPbc",
                            "P7KPbc_B",
                            "Pb",
                            "PKKP",
                            "PKKSbc",
                            "PKP2df",
                            "PKPab",
                            "PKSbc",
                            "PP_B",
                            "pPKPdf",
                            "PS_1",
                            "SKKP",
                            "SKKSac_B",
                            "SKS",
                            "SKSSKS",
                            "sPKiKP",
                            "SS_1",
                            "SSS",
                            "nNL",
                            "P3KPdf",
                            "P5KPbc_B",
                            "P7KPbc_C",
                            "PcP",
                            "PKKPab",
                            "PKKSdf",
                            "PKP3",
                            "PKPbc",
                            "PKSdf",
                            "pPdiff",
                            "PPP",
                            "pSdiff",
                            "Sb",
                            "SKKPab",
                            "SKKSdf",
                            "SKS2",
                            "Sn",
                            "sPKP",
                            "SS_B",
                            "SSS_B",
                            "NP",
                            "P3KPdf_B",
                            "P5KPdf",
                            "P7KPdf",
                            "PcS",
                            "PKKPbc",
                            "PKP",
                            "PKP3ab",
                            "PKPdf",
                            "Pn",
                            "pPKiKP",
                            "PPP_B",
                            "pSKS",
                            "ScP",
                            "SKKPbc",
                            "SKP",
                            "SKS2ac",
                            "SnSn",
                            "sPKPab",
                            "sSdiff",
                            "NP_1",
                            "P4KPbc",
                            "P5KPdf_B",
                            "P7KPdf_B",
                            "Pdiff",
                            "PKKPdf",
                            "PKP2",
                            "PKP3bc",
                            "PKPPKP",
                            "PnPn",
                            "pPKP",
                            "PPS",
                            "pSKSac",
                            "ScS",
                            "SKKPdf",
                            "SKPab",
                            "SKS2df",
                            "SP",
                            "sPKPbc",
                            "sSKS",
                            "P4KPdf",
                            "P5KPdf_C",
                            "P7KPdf_C",
                            "Pg",
                            "PKKS",
                            "PKP2ab",
                            "PKP3df",
                            "PKS",
                            "PP",
                            "pPKPab",
                            "PPS_B",
                            "pSKSdf",
                            "Sdiff",
                            "SKKS",
                            "SKPbc",
                            "SKSac",
                            "SP_1",
                            "sPKPdf",
                            "sSKSac",
                            "Sx",
                            "tx",
                            "N",
                            "Px",
                            "PKhKP",
                            "LR",
                          ]
                        }
                      />,
                      "rank": 8,
                      "tooltip": "Set default phase of new signal detections",
                      "type": "Popover",
                      "widthPx": 88,
                    }
                  }
                  key="8"
                >
                  <div
                    style={Object {}}
                  >
                    <PopoverButtonComponent
                      disabled={true}
                      key="8"
                      label="P"
                      onPopoverDismissed={[Function]}
                      popupContent={
                        <PhaseSelectionMenu
                          onBlur={[Function]}
                          onEnterForPhases={[Function]}
                          onPhaseClicked={[Function]}
                          phase="P"
                          prioritySdPhases={
                            Array [
                              "P",
                              "S",
                            ]
                          }
                          sdPhases={
                            Array [
                              "P",
                              "S",
                              "P3KPbc",
                              "P4KPdf_B",
                              "P7KPbc",
                              "P7KPdf_D",
                              "PKiKP",
                              "PKKSab",
                              "PKP2bc",
                              "PKP3df_B",
                              "PKSab",
                              "PP_1",
                              "pPKPbc",
                              "PS",
                              "Rg",
                              "SKiKP",
                              "SKKSac",
                              "SKPdf",
                              "SKSdf",
                              "sPdiff",
                              "SS",
                              "sSKSdf",
                              "Lg",
                              "P3KPbc_B",
                              "P5KPbc",
                              "P7KPbc_B",
                              "Pb",
                              "PKKP",
                              "PKKSbc",
                              "PKP2df",
                              "PKPab",
                              "PKSbc",
                              "PP_B",
                              "pPKPdf",
                              "PS_1",
                              "SKKP",
                              "SKKSac_B",
                              "SKS",
                              "SKSSKS",
                              "sPKiKP",
                              "SS_1",
                              "SSS",
                              "nNL",
                              "P3KPdf",
                              "P5KPbc_B",
                              "P7KPbc_C",
                              "PcP",
                              "PKKPab",
                              "PKKSdf",
                              "PKP3",
                              "PKPbc",
                              "PKSdf",
                              "pPdiff",
                              "PPP",
                              "pSdiff",
                              "Sb",
                              "SKKPab",
                              "SKKSdf",
                              "SKS2",
                              "Sn",
                              "sPKP",
                              "SS_B",
                              "SSS_B",
                              "NP",
                              "P3KPdf_B",
                              "P5KPdf",
                              "P7KPdf",
                              "PcS",
                              "PKKPbc",
                              "PKP",
                              "PKP3ab",
                              "PKPdf",
                              "Pn",
                              "pPKiKP",
                              "PPP_B",
                              "pSKS",
                              "ScP",
                              "SKKPbc",
                              "SKP",
                              "SKS2ac",
                              "SnSn",
                              "sPKPab",
                              "sSdiff",
                              "NP_1",
                              "P4KPbc",
                              "P5KPdf_B",
                              "P7KPdf_B",
                              "Pdiff",
                              "PKKPdf",
                              "PKP2",
                              "PKP3bc",
                              "PKPPKP",
                              "PnPn",
                              "pPKP",
                              "PPS",
                              "pSKSac",
                              "ScS",
                              "SKKPdf",
                              "SKPab",
                              "SKS2df",
                              "SP",
                              "sPKPbc",
                              "sSKS",
                              "P4KPdf",
                              "P5KPdf_C",
                              "P7KPdf_C",
                              "Pg",
                              "PKKS",
                              "PKP2ab",
                              "PKP3df",
                              "PKS",
                              "PP",
                              "pPKPab",
                              "PPS_B",
                              "pSKSdf",
                              "Sdiff",
                              "SKKS",
                              "SKPbc",
                              "SKSac",
                              "SP_1",
                              "sPKPdf",
                              "sSKSac",
                              "Sx",
                              "tx",
                              "N",
                              "Px",
                              "PKhKP",
                              "LR",
                            ]
                          }
                        />
                      }
                      tooltip="Set default phase of new signal detections"
                      widthPx={88}
                    >
                      <div>
                        <Blueprint3.Button
                          active={false}
                          alignText="left"
                          className="toolbar-button"
                          disabled={true}
                          onClick={[Function]}
                          style={
                            Object {
                              "width": "88px",
                            }
                          }
                          title="Set default phase of new signal detections"
                        >
                          <button
                            className="bp3-button bp3-disabled bp3-align-left toolbar-button"
                            disabled={true}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            style={
                              Object {
                                "width": "88px",
                              }
                            }
                            tabIndex={-1}
                            title="Set default phase of new signal detections"
                            type="button"
                          >
                            <Blueprint3.Icon
                              key="leftIcon"
                            />
                            <span
                              className="bp3-button-text"
                              key="text"
                            >
                              <span>
                                P
                              </span>
                              <Blueprint3.Icon
                                icon="chevron-down"
                                title={false}
                              >
                                <span
                                  className="bp3-icon bp3-icon-chevron-down"
                                  icon="chevron-down"
                                >
                                  <svg
                                    data-icon="chevron-down"
                                    height={16}
                                    viewBox="0 0 16 16"
                                    width={16}
                                  >
                                    <path
                                      d="M12 5c-.28 0-.53.11-.71.29L8 8.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42l4 4c.18.18.43.29.71.29s.53-.11.71-.29l4-4A1.003 1.003 0 0012 5z"
                                      fillRule="evenodd"
                                      key="0"
                                    />
                                  </svg>
                                </span>
                              </Blueprint3.Icon>
                            </span>
                            <Blueprint3.Icon
                              key="rightIcon"
                            />
                          </button>
                        </Blueprint3.Button>
                      </div>
                    </PopoverButtonComponent>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="9"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "disabled": false,
                      "label": "Time",
                      "menuLabel": "Alignment",
                      "onPopoverDismissed": [Function],
                      "popoverContent": <AlignmentMenu
                        alignedOn="Time"
                        onSubmit={[Function]}
                        phaseAlignedOn="P"
                        prioritySdPhases={Array []}
                        sdPhases={Array []}
                      />,
                      "rank": 9,
                      "tooltip": "Align waveforms to time or phase",
                      "type": "Popover",
                      "widthPx": 154,
                    }
                  }
                  key="9"
                >
                  <div
                    style={Object {}}
                  >
                    <PopoverButtonComponent
                      disabled={false}
                      key="9"
                      label="Time"
                      onPopoverDismissed={[Function]}
                      popupContent={
                        <AlignmentMenu
                          alignedOn="Time"
                          onSubmit={[Function]}
                          phaseAlignedOn="P"
                          prioritySdPhases={Array []}
                          sdPhases={Array []}
                        />
                      }
                      tooltip="Align waveforms to time or phase"
                      widthPx={154}
                    >
                      <div>
                        <Blueprint3.Button
                          active={false}
                          alignText="left"
                          className="toolbar-button"
                          disabled={false}
                          onClick={[Function]}
                          style={
                            Object {
                              "width": "154px",
                            }
                          }
                          title="Align waveforms to time or phase"
                        >
                          <button
                            className="bp3-button bp3-align-left toolbar-button"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            style={
                              Object {
                                "width": "154px",
                              }
                            }
                            title="Align waveforms to time or phase"
                            type="button"
                          >
                            <Blueprint3.Icon
                              key="leftIcon"
                            />
                            <span
                              className="bp3-button-text"
                              key="text"
                            >
                              <span>
                                Time
                              </span>
                              <Blueprint3.Icon
                                icon="chevron-down"
                                title={false}
                              >
                                <span
                                  className="bp3-icon bp3-icon-chevron-down"
                                  icon="chevron-down"
                                >
                                  <svg
                                    data-icon="chevron-down"
                                    height={16}
                                    viewBox="0 0 16 16"
                                    width={16}
                                  >
                                    <path
                                      d="M12 5c-.28 0-.53.11-.71.29L8 8.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42l4 4c.18.18.43.29.71.29s.53-.11.71-.29l4-4A1.003 1.003 0 0012 5z"
                                      fillRule="evenodd"
                                      key="0"
                                    />
                                  </svg>
                                </span>
                              </Blueprint3.Icon>
                            </span>
                            <Blueprint3.Icon
                              key="rightIcon"
                            />
                          </button>
                        </Blueprint3.Button>
                      </div>
                    </PopoverButtonComponent>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="10"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "disabled": false,
                      "dropdownOptions": Object {
                        "distance": "Distance",
                        "stationName": "Station Name",
                      },
                      "label": "Station Sort",
                      "onChange": [Function],
                      "rank": 10,
                      "tooltip": "Set the sort order of stations",
                      "type": "Dropdown",
                      "value": "Station Name",
                      "widthPx": 130,
                    }
                  }
                  key="10"
                >
                  <div
                    style={Object {}}
                  >
                    <DropDown
                      disabled={false}
                      dropDownItems={
                        Object {
                          "distance": "Distance",
                          "stationName": "Station Name",
                        }
                      }
                      key="10"
                      label="Station Sort"
                      onMaybeValue={[Function]}
                      title="Set the sort order of stations"
                      value="Station Name"
                      widthPx={130}
                    >
                      <div
                        className="dropdown-container"
                      >
                        <span
                          className="dropdown-selector"
                        >
                          <HTMLSelect
                            disabled={false}
                            onChange={[Function]}
                            style={
                              Object {
                                "minWidth": "130px",
                                "width": "130px",
                              }
                            }
                            title="Set the sort order of stations"
                            value="Station Name"
                          >
                            <div
                              className="bp3-html-select"
                            >
                              <select
                                disabled={false}
                                multiple={false}
                                onChange={[Function]}
                                style={
                                  Object {
                                    "minWidth": "130px",
                                    "width": "130px",
                                  }
                                }
                                title="Set the sort order of stations"
                                value="Station Name"
                              >
                                <option
                                  key="distance"
                                  value="Distance"
                                >
                                  Distance
                                </option>
                                <option
                                  key="stationName"
                                  value="Station Name"
                                >
                                  Station Name
                                </option>
                              </select>
                              <Blueprint3.Icon
                                icon="double-caret-vertical"
                              >
                                <span
                                  className="bp3-icon bp3-icon-double-caret-vertical"
                                  icon="double-caret-vertical"
                                >
                                  <svg
                                    data-icon="double-caret-vertical"
                                    height={16}
                                    viewBox="0 0 16 16"
                                    width={16}
                                  >
                                    <desc>
                                      double-caret-vertical
                                    </desc>
                                    <path
                                      d="M5 7h6a1.003 1.003 0 00.71-1.71l-3-3C8.53 2.11 8.28 2 8 2s-.53.11-.71.29l-3 3A1.003 1.003 0 005 7zm6 2H5a1.003 1.003 0 00-.71 1.71l3 3c.18.18.43.29.71.29s.53-.11.71-.29l3-3A1.003 1.003 0 0011 9z"
                                      fillRule="evenodd"
                                      key="0"
                                    />
                                  </svg>
                                </span>
                              </Blueprint3.Icon>
                            </div>
                          </HTMLSelect>
                        </span>
                      </div>
                    </DropDown>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="11"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "cyData": "Predicted Phases",
                      "disabled": true,
                      "label": "Predicted Phases",
                      "menuLabel": "Show Predicted Phases",
                      "onChange": [Function],
                      "rank": 11,
                      "tooltip": "Show/Hide predicted phases",
                      "type": "Switch",
                      "value": false,
                    }
                  }
                  key="11"
                >
                  <div
                    className="toolbar-switch"
                    key="11"
                    style={Object {}}
                    title="Show/Hide predicted phases"
                  >
                    <div
                      className="toolbar-switch-label"
                    >
                      Predicted Phases:
                    </div>
                    <Blueprint3.Switch
                      checked={false}
                      className="toolbar-switch__blueprint predicted-phases"
                      data-cy="Predicted Phases"
                      disabled={true}
                      large={true}
                      onChange={[Function]}
                      title="Show/Hide predicted phases"
                    >
                      <Control
                        checked={false}
                        className="toolbar-switch__blueprint predicted-phases"
                        data-cy="Predicted Phases"
                        disabled={true}
                        indicatorChildren={null}
                        large={true}
                        onChange={[Function]}
                        title="Show/Hide predicted phases"
                        type="checkbox"
                        typeClassName="bp3-switch"
                      >
                        <label
                          className="bp3-control bp3-switch bp3-disabled bp3-large toolbar-switch__blueprint predicted-phases"
                        >
                          <input
                            checked={false}
                            data-cy="Predicted Phases"
                            disabled={true}
                            onChange={[Function]}
                            title="Show/Hide predicted phases"
                            type="checkbox"
                          />
                          <span
                            className="bp3-control-indicator"
                          />
                        </label>
                      </Control>
                    </Blueprint3.Switch>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="12"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "disabled": true,
                      "label": "QC Masks",
                      "onPopoverDismissed": [Function],
                      "popoverContent": <QcMaskFilter
                        maskDisplayFilters={
                          Object {
                            "ANALYST_DEFINED": Object {
                              "color": "tomato",
                              "name": "ANALYST_DEFINED",
                              "visible": false,
                            },
                            "CHANNEL_PROCESSING": Object {
                              "color": "tomato",
                              "name": "CHANNEL_PROCESSING",
                              "visible": false,
                            },
                            "DATA_AUTHENTICATION": Object {
                              "color": "tomato",
                              "name": "DATA_AUTHENTICATION",
                              "visible": false,
                            },
                            "REJECTED": Object {
                              "color": "tomato",
                              "name": "REJECTED",
                              "visible": false,
                            },
                            "STATION_SOH": Object {
                              "color": "tomato",
                              "name": "STATION_SOH",
                              "visible": false,
                            },
                            "WAVEFORM_QUALITY": Object {
                              "color": "tomato",
                              "name": "WAVEFORM_QUALITY",
                              "visible": false,
                            },
                          }
                        }
                        setMaskDisplayFilters={[MockFunction]}
                      />,
                      "rank": 12,
                      "tooltip": "Show/Hide categories of QC masks",
                      "type": "Popover",
                      "widthPx": 110,
                    }
                  }
                  key="12"
                >
                  <div
                    style={Object {}}
                  >
                    <PopoverButtonComponent
                      disabled={true}
                      key="12"
                      label="QC Masks"
                      onPopoverDismissed={[Function]}
                      popupContent={
                        <QcMaskFilter
                          maskDisplayFilters={
                            Object {
                              "ANALYST_DEFINED": Object {
                                "color": "tomato",
                                "name": "ANALYST_DEFINED",
                                "visible": false,
                              },
                              "CHANNEL_PROCESSING": Object {
                                "color": "tomato",
                                "name": "CHANNEL_PROCESSING",
                                "visible": false,
                              },
                              "DATA_AUTHENTICATION": Object {
                                "color": "tomato",
                                "name": "DATA_AUTHENTICATION",
                                "visible": false,
                              },
                              "REJECTED": Object {
                                "color": "tomato",
                                "name": "REJECTED",
                                "visible": false,
                              },
                              "STATION_SOH": Object {
                                "color": "tomato",
                                "name": "STATION_SOH",
                                "visible": false,
                              },
                              "WAVEFORM_QUALITY": Object {
                                "color": "tomato",
                                "name": "WAVEFORM_QUALITY",
                                "visible": false,
                              },
                            }
                          }
                          setMaskDisplayFilters={[MockFunction]}
                        />
                      }
                      tooltip="Show/Hide categories of QC masks"
                      widthPx={110}
                    >
                      <div>
                        <Blueprint3.Button
                          active={false}
                          alignText="left"
                          className="toolbar-button"
                          disabled={true}
                          onClick={[Function]}
                          style={
                            Object {
                              "width": "110px",
                            }
                          }
                          title="Show/Hide categories of QC masks"
                        >
                          <button
                            className="bp3-button bp3-disabled bp3-align-left toolbar-button"
                            disabled={true}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            style={
                              Object {
                                "width": "110px",
                              }
                            }
                            tabIndex={-1}
                            title="Show/Hide categories of QC masks"
                            type="button"
                          >
                            <Blueprint3.Icon
                              key="leftIcon"
                            />
                            <span
                              className="bp3-button-text"
                              key="text"
                            >
                              <span>
                                QC Masks
                              </span>
                              <Blueprint3.Icon
                                icon="chevron-down"
                                title={false}
                              >
                                <span
                                  className="bp3-icon bp3-icon-chevron-down"
                                  icon="chevron-down"
                                >
                                  <svg
                                    data-icon="chevron-down"
                                    height={16}
                                    viewBox="0 0 16 16"
                                    width={16}
                                  >
                                    <path
                                      d="M12 5c-.28 0-.53.11-.71.29L8 8.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42l4 4c.18.18.43.29.71.29s.53-.11.71-.29l4-4A1.003 1.003 0 0012 5z"
                                      fillRule="evenodd"
                                      key="0"
                                    />
                                  </svg>
                                </span>
                              </Blueprint3.Icon>
                            </span>
                            <Blueprint3.Icon
                              key="rightIcon"
                            />
                          </button>
                        </Blueprint3.Button>
                      </div>
                    </PopoverButtonComponent>
                  </div>
                </ToolbarItemRenderer>
              </div>
              <div
                className="toolbar-item
                    "
                key="13"
              >
                <ToolbarItemRenderer
                  addToPopoverMap={[Function]}
                  hasIssue={false}
                  item={
                    Object {
                      "disabled": false,
                      "label": "Measure Window",
                      "menuLabel": "Show Measure Window",
                      "onChange": [Function],
                      "rank": 13,
                      "tooltip": "Show/Hide Measure Window",
                      "type": "Switch",
                      "value": false,
                    }
                  }
                  key="13"
                >
                  <div
                    className="toolbar-switch"
                    key="13"
                    style={Object {}}
                    title="Show/Hide Measure Window"
                  >
                    <div
                      className="toolbar-switch-label"
                    >
                      Measure Window:
                    </div>
                    <Blueprint3.Switch
                      checked={false}
                      className="toolbar-switch__blueprint measure-window"
                      disabled={false}
                      large={true}
                      onChange={[Function]}
                      title="Show/Hide Measure Window"
                    >
                      <Control
                        checked={false}
                        className="toolbar-switch__blueprint measure-window"
                        disabled={false}
                        indicatorChildren={null}
                        large={true}
                        onChange={[Function]}
                        title="Show/Hide Measure Window"
                        type="checkbox"
                        typeClassName="bp3-switch"
                      >
                        <label
                          className="bp3-control bp3-switch bp3-large toolbar-switch__blueprint measure-window"
                        >
                          <input
                            checked={false}
                            disabled={false}
                            onChange={[Function]}
                            title="Show/Hide Measure Window"
                            type="checkbox"
                          />
                          <span
                            className="bp3-control-indicator"
                          />
                        </label>
                      </Control>
                    </Blueprint3.Switch>
                  </div>
                </ToolbarItemRenderer>
              </div>
            </div>
          </div>
        </ToolbarComponent>
      </div>
    </Memo(InternalWaveformToolbar)>
  </Memo(InternalWaveformControls)>
  <WaveformLoadingIndicator>
    <div
      className="loading-indicator__container"
    />
  </WaveformLoadingIndicator>
</Provider>
`;
