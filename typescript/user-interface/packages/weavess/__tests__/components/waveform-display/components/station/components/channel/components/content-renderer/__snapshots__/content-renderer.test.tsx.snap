// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Weavess Content Renderer create all markers 1`] = `
<ContentRenderer
  canvasRef={
    [MockFunction] {
      "calls": Array [
        Array [],
        Array [],
        Array [],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  channelId="channel-id"
  color="#4580E6"
  contentRenderers={Array []}
  converters={
    Object {
      "computeFractionOfCanvasFromMouseXPx": [MockFunction],
      "computeTimeSecsForMouseXFractionalPosition": [MockFunction],
      "computeTimeSecsFromMouseXPixels": [MockFunction],
    }
  }
  description="description"
  descriptionLabelColor="ff000"
  disablePredictedPhaseModification={false}
  disableSignalDetectionModification={false}
  displayEndTimeSecs={700}
  displayStartTimeSecs={300}
  displayType={
    Array [
      "LINE",
    ]
  }
  events={
    Object {
      "onChannelClick": [MockFunction],
      "onClickSelectionWindow": [MockFunction],
      "onContextMenu": [MockFunction],
      "onMaskClick": [MockFunction],
      "onMaskContextClick": [MockFunction],
      "onMaskCreateDragEnd": [MockFunction],
      "onMeasureWindowUpdated": [MockFunction],
      "onMoveSelectionWindow": [MockFunction],
      "onPredictivePhaseClick": [MockFunction],
      "onPredictivePhaseContextMenu": [MockFunction],
      "onPredictivePhaseDragEnd": [MockFunction],
      "onSignalDetectionClick": [MockFunction],
      "onSignalDetectionContextMenu": [MockFunction],
      "onSignalDetectionDragEnd": [MockFunction],
      "onUpdateMarker": [MockFunction],
      "onUpdateSelectionWindow": [MockFunction],
    }
  }
  getCurrentViewRangeInSeconds={[MockFunction]}
  getViewRange={[MockFunction]}
  initialConfiguration={
    Object {
      "defaultChannel": Object {
        "disableMaskModification": true,
        "disableMeasureWindow": true,
        "disableSignalDetectionModification": false,
      },
      "hotKeys": Object {
        "amplitudeScale": "KeyS",
        "amplitudeScaleReset": "Alt+Shift+KeyS",
        "amplitudeScaleSingleReset": "Alt+KeyS",
        "maskCreate": "KeyM",
      },
      "nonDefaultChannel": Object {
        "disableMaskModification": false,
        "disableMeasureWindow": true,
        "disableSignalDetectionModification": true,
      },
      "shouldRenderSpectrograms": false,
      "shouldRenderWaveforms": true,
    }
  }
  isDefaultChannel={true}
  markers={
    Object {
      "moveableMarkers": Array [
        Object {
          "color": "ff000",
          "id": "moveable",
          "lineStyle": "dashed",
          "maxTimeSecsConstraint": 200,
          "minTimeSecsConstraint": 4,
          "timeSecs": 40,
        },
      ],
      "selectionWindows": Array [
        Object {
          "color": "00ff00",
          "endMarker": Object {
            "color": "ff0000",
            "id": "end",
            "lineStyle": "solid",
            "maxTimeSecsConstraint": 200,
            "minTimeSecsConstraint": 1,
            "timeSecs": 80,
          },
          "id": "selection",
          "isMoveable": true,
          "startMarker": Object {
            "color": "ff0000",
            "id": "start",
            "lineStyle": "solid",
            "maxTimeSecsConstraint": 200,
            "minTimeSecsConstraint": 1,
            "timeSecs": 10,
          },
        },
      ],
      "verticalMarkers": Array [
        Object {
          "color": "0000ff",
          "id": "vertical",
          "lineStyle": "dashed",
          "maxTimeSecsConstraint": 300,
          "minTimeSecsConstraint": 0,
          "timeSecs": 120,
        },
      ],
    }
  }
  onContextMenu={[MockFunction]}
  onKeyDown={[MockFunction]}
  onMouseDown={[MockFunction]}
  onMouseMove={[MockFunction]}
  onMouseUp={[MockFunction]}
  pointSize={2}
  predictedPhases={Array []}
  renderWaveforms={[MockFunction]}
  selections={
    Object {
      "channels": Array [],
      "predictedPhases": Array [],
      "signalDetections": Array [],
    }
  }
  setYAxisBounds={[MockFunction]}
  signalDetections={Array []}
  stationId="station-id"
  theoreticalPhaseWindows={Array []}
  toast={[MockFunction]}
  updateMeasureWindow={[MockFunction]}
  workerRpcs={Array []}
>
  <div
    className="contentrenderer"
    onContextMenu={[MockFunction]}
    onKeyDown={[MockFunction]}
    onMouseDown={[MockFunction]}
    onMouseMove={[MockFunction]}
    onMouseUp={[MockFunction]}
    style={
      Object {
        "backgroundColor": "initial",
      }
    }
    tabIndex={0}
  >
    <div
      className="contentrenderer-content contentrenderer-content--sticky"
      style={
        Object {
          "width": "calc(100vw - 184)",
        }
      }
    >
      <div
        className="contentrenderer-content-description-label"
        data-cy="filtered-channel-label"
        data-cy-color="ff000"
        style={
          Object {
            "color": "ff000",
          }
        }
      >
        <span
          className="contentrenderer-content__description"
        >
          description
        </span>
      </div>
    </div>
    <div
      className="contentrenderer-content"
      style={
        Object {
          "left": 184,
          "width": "calc(100% - 184)",
        }
      }
    >
      <div
        className="contentrenderer-content-drag-indicator"
      />
      <div
        className="contentrenderer-content-markers"
      />
      <SignalDetections
        channelId="channel-id"
        disableModification={false}
        displayEndTimeSecs={700}
        displayStartTimeSecs={300}
        events={
          Object {
            "onChannelClick": [MockFunction],
            "onClickSelectionWindow": [MockFunction],
            "onContextMenu": [MockFunction],
            "onMaskClick": [MockFunction],
            "onMaskContextClick": [MockFunction],
            "onMaskCreateDragEnd": [MockFunction],
            "onMeasureWindowUpdated": [MockFunction],
            "onMoveSelectionWindow": [MockFunction],
            "onPredictivePhaseClick": [MockFunction],
            "onPredictivePhaseContextMenu": [MockFunction],
            "onPredictivePhaseDragEnd": [MockFunction],
            "onSignalDetectionClick": [MockFunction],
            "onSignalDetectionContextMenu": [MockFunction],
            "onSignalDetectionDragEnd": [MockFunction],
            "onUpdateMarker": [MockFunction],
            "onUpdateSelectionWindow": [MockFunction],
          }
        }
        getTimeSecsForClientX={[Function]}
        isDefaultChannel={true}
        positionDragIndicator={[Function]}
        selectedSignalDetections={Array []}
        signalDetections={Array []}
        stationId="station-id"
        toast={[MockFunction]}
        toggleDragIndicator={[Function]}
      />
      <PredictedPhases
        channelId="channel-id"
        disableModification={false}
        displayEndTimeSecs={700}
        displayStartTimeSecs={300}
        events={
          Object {
            "onChannelClick": [MockFunction],
            "onClickSelectionWindow": [MockFunction],
            "onContextMenu": [MockFunction],
            "onMaskClick": [MockFunction],
            "onMaskContextClick": [MockFunction],
            "onMaskCreateDragEnd": [MockFunction],
            "onMeasureWindowUpdated": [MockFunction],
            "onMoveSelectionWindow": [MockFunction],
            "onPredictivePhaseClick": [MockFunction],
            "onPredictivePhaseContextMenu": [MockFunction],
            "onPredictivePhaseDragEnd": [MockFunction],
            "onSignalDetectionClick": [MockFunction],
            "onSignalDetectionContextMenu": [MockFunction],
            "onSignalDetectionDragEnd": [MockFunction],
            "onUpdateMarker": [MockFunction],
            "onUpdateSelectionWindow": [MockFunction],
          }
        }
        getTimeSecsForClientX={[Function]}
        isDefaultChannel={true}
        positionDragIndicator={[Function]}
        predictedPhases={Array []}
        selectedPredictedPhases={Array []}
        stationId="station-id"
        toast={[MockFunction]}
        toggleDragIndicator={[Function]}
      />
      <TheoreticalPhases
        displayEndTimeSecs={700}
        displayStartTimeSecs={300}
        events={
          Object {
            "onChannelClick": [MockFunction],
            "onClickSelectionWindow": [MockFunction],
            "onContextMenu": [MockFunction],
            "onMaskClick": [MockFunction],
            "onMaskContextClick": [MockFunction],
            "onMaskCreateDragEnd": [MockFunction],
            "onMeasureWindowUpdated": [MockFunction],
            "onMoveSelectionWindow": [MockFunction],
            "onPredictivePhaseClick": [MockFunction],
            "onPredictivePhaseContextMenu": [MockFunction],
            "onPredictivePhaseDragEnd": [MockFunction],
            "onSignalDetectionClick": [MockFunction],
            "onSignalDetectionContextMenu": [MockFunction],
            "onSignalDetectionDragEnd": [MockFunction],
            "onUpdateMarker": [MockFunction],
            "onUpdateSelectionWindow": [MockFunction],
          }
        }
        getTimeSecsForClientX={[Function]}
        isDefaultChannel={true}
        positionDragIndicator={[Function]}
        stationId="station-id"
        theoreticalPhaseWindows={Array []}
        toast={[MockFunction]}
        toggleDragIndicator={[Function]}
      />
    </div>
  </div>
</ContentRenderer>
`;

exports[`Weavess Content Renderer renders 1`] = `
<ContentRenderer
  canvasRef={
    [MockFunction] {
      "calls": Array [
        Array [],
        Array [],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  channelId="channel-id"
  color="#4580E6"
  contentRenderers={Array []}
  converters={
    Object {
      "computeFractionOfCanvasFromMouseXPx": [MockFunction],
      "computeTimeSecsForMouseXFractionalPosition": [MockFunction],
      "computeTimeSecsFromMouseXPixels": [MockFunction],
    }
  }
  description="description"
  descriptionLabelColor="ff000"
  disablePredictedPhaseModification={false}
  disableSignalDetectionModification={false}
  displayEndTimeSecs={700}
  displayStartTimeSecs={300}
  displayType={
    Array [
      "LINE",
    ]
  }
  events={
    Object {
      "onChannelClick": [MockFunction],
      "onClickSelectionWindow": [MockFunction],
      "onContextMenu": [MockFunction],
      "onMaskClick": [MockFunction],
      "onMaskContextClick": [MockFunction],
      "onMaskCreateDragEnd": [MockFunction],
      "onMeasureWindowUpdated": [MockFunction],
      "onMoveSelectionWindow": [MockFunction],
      "onPredictivePhaseClick": [MockFunction],
      "onPredictivePhaseContextMenu": [MockFunction],
      "onPredictivePhaseDragEnd": [MockFunction],
      "onSignalDetectionClick": [MockFunction],
      "onSignalDetectionContextMenu": [MockFunction],
      "onSignalDetectionDragEnd": [MockFunction],
      "onUpdateMarker": [MockFunction],
      "onUpdateSelectionWindow": [MockFunction],
    }
  }
  getCurrentViewRangeInSeconds={[MockFunction]}
  getViewRange={[MockFunction]}
  initialConfiguration={
    Object {
      "defaultChannel": Object {
        "disableMaskModification": true,
        "disableMeasureWindow": true,
        "disableSignalDetectionModification": false,
      },
      "hotKeys": Object {
        "amplitudeScale": "KeyS",
        "amplitudeScaleReset": "Alt+Shift+KeyS",
        "amplitudeScaleSingleReset": "Alt+KeyS",
        "maskCreate": "KeyM",
      },
      "nonDefaultChannel": Object {
        "disableMaskModification": false,
        "disableMeasureWindow": true,
        "disableSignalDetectionModification": true,
      },
      "shouldRenderSpectrograms": false,
      "shouldRenderWaveforms": true,
    }
  }
  isDefaultChannel={true}
  markers={
    Object {
      "moveableMarkers": Array [],
      "selectionWindows": Array [],
      "verticalMarkers": Array [],
    }
  }
  onContextMenu={[MockFunction]}
  onKeyDown={[MockFunction]}
  onMouseDown={[MockFunction]}
  onMouseMove={[MockFunction]}
  onMouseUp={[MockFunction]}
  pointSize={2}
  predictedPhases={Array []}
  renderWaveforms={[MockFunction]}
  selections={
    Object {
      "channels": Array [],
      "predictedPhases": Array [],
      "signalDetections": Array [],
    }
  }
  setYAxisBounds={[MockFunction]}
  signalDetections={Array []}
  stationId="station-id"
  theoreticalPhaseWindows={Array []}
  toast={[MockFunction]}
  updateMeasureWindow={[MockFunction]}
  workerRpcs={Array []}
>
  <div
    className="contentrenderer"
    onContextMenu={[MockFunction]}
    onKeyDown={[MockFunction]}
    onMouseDown={[MockFunction]}
    onMouseMove={[MockFunction]}
    onMouseUp={[MockFunction]}
    style={
      Object {
        "backgroundColor": "initial",
      }
    }
    tabIndex={0}
  >
    <div
      className="contentrenderer-content contentrenderer-content--sticky"
      style={
        Object {
          "width": "calc(100vw - 184)",
        }
      }
    >
      <div
        className="contentrenderer-content-description-label"
        data-cy="filtered-channel-label"
        data-cy-color="ff000"
        style={
          Object {
            "color": "ff000",
          }
        }
      >
        <span
          className="contentrenderer-content__description"
        >
          description
        </span>
      </div>
    </div>
    <div
      className="contentrenderer-content"
      style={
        Object {
          "left": 184,
          "width": "calc(100% - 184)",
        }
      }
    >
      <div
        className="contentrenderer-content-drag-indicator"
      />
      <div
        className="contentrenderer-content-markers"
      />
      <SignalDetections
        channelId="channel-id"
        disableModification={false}
        displayEndTimeSecs={700}
        displayStartTimeSecs={300}
        events={
          Object {
            "onChannelClick": [MockFunction],
            "onClickSelectionWindow": [MockFunction],
            "onContextMenu": [MockFunction],
            "onMaskClick": [MockFunction],
            "onMaskContextClick": [MockFunction],
            "onMaskCreateDragEnd": [MockFunction],
            "onMeasureWindowUpdated": [MockFunction],
            "onMoveSelectionWindow": [MockFunction],
            "onPredictivePhaseClick": [MockFunction],
            "onPredictivePhaseContextMenu": [MockFunction],
            "onPredictivePhaseDragEnd": [MockFunction],
            "onSignalDetectionClick": [MockFunction],
            "onSignalDetectionContextMenu": [MockFunction],
            "onSignalDetectionDragEnd": [MockFunction],
            "onUpdateMarker": [MockFunction],
            "onUpdateSelectionWindow": [MockFunction],
          }
        }
        getTimeSecsForClientX={[Function]}
        isDefaultChannel={true}
        positionDragIndicator={[Function]}
        selectedSignalDetections={Array []}
        signalDetections={Array []}
        stationId="station-id"
        toast={[MockFunction]}
        toggleDragIndicator={[Function]}
      />
      <PredictedPhases
        channelId="channel-id"
        disableModification={false}
        displayEndTimeSecs={700}
        displayStartTimeSecs={300}
        events={
          Object {
            "onChannelClick": [MockFunction],
            "onClickSelectionWindow": [MockFunction],
            "onContextMenu": [MockFunction],
            "onMaskClick": [MockFunction],
            "onMaskContextClick": [MockFunction],
            "onMaskCreateDragEnd": [MockFunction],
            "onMeasureWindowUpdated": [MockFunction],
            "onMoveSelectionWindow": [MockFunction],
            "onPredictivePhaseClick": [MockFunction],
            "onPredictivePhaseContextMenu": [MockFunction],
            "onPredictivePhaseDragEnd": [MockFunction],
            "onSignalDetectionClick": [MockFunction],
            "onSignalDetectionContextMenu": [MockFunction],
            "onSignalDetectionDragEnd": [MockFunction],
            "onUpdateMarker": [MockFunction],
            "onUpdateSelectionWindow": [MockFunction],
          }
        }
        getTimeSecsForClientX={[Function]}
        isDefaultChannel={true}
        positionDragIndicator={[Function]}
        predictedPhases={Array []}
        selectedPredictedPhases={Array []}
        stationId="station-id"
        toast={[MockFunction]}
        toggleDragIndicator={[Function]}
      />
      <TheoreticalPhases
        displayEndTimeSecs={700}
        displayStartTimeSecs={300}
        events={
          Object {
            "onChannelClick": [MockFunction],
            "onClickSelectionWindow": [MockFunction],
            "onContextMenu": [MockFunction],
            "onMaskClick": [MockFunction],
            "onMaskContextClick": [MockFunction],
            "onMaskCreateDragEnd": [MockFunction],
            "onMeasureWindowUpdated": [MockFunction],
            "onMoveSelectionWindow": [MockFunction],
            "onPredictivePhaseClick": [MockFunction],
            "onPredictivePhaseContextMenu": [MockFunction],
            "onPredictivePhaseDragEnd": [MockFunction],
            "onSignalDetectionClick": [MockFunction],
            "onSignalDetectionContextMenu": [MockFunction],
            "onSignalDetectionDragEnd": [MockFunction],
            "onUpdateMarker": [MockFunction],
            "onUpdateSelectionWindow": [MockFunction],
          }
        }
        getTimeSecsForClientX={[Function]}
        isDefaultChannel={true}
        positionDragIndicator={[Function]}
        stationId="station-id"
        theoreticalPhaseWindows={Array []}
        toast={[MockFunction]}
        toggleDragIndicator={[Function]}
      />
    </div>
  </div>
</ContentRenderer>
`;

exports[`Weavess Content Renderer shallow renders 1`] = `
<div
  className="contentrenderer"
  onContextMenu={[MockFunction]}
  onKeyDown={[MockFunction]}
  onMouseDown={[MockFunction]}
  onMouseMove={[MockFunction]}
  onMouseUp={[MockFunction]}
  style={
    Object {
      "backgroundColor": "initial",
    }
  }
  tabIndex={0}
>
  <div
    className="contentrenderer-content contentrenderer-content--sticky"
    style={
      Object {
        "width": "calc(100vw - 184)",
      }
    }
  >
    <div
      className="contentrenderer-content-description-label"
      data-cy="filtered-channel-label"
      data-cy-color="ff000"
      style={
        Object {
          "color": "ff000",
        }
      }
    >
      <span
        className="contentrenderer-content__description"
      >
        description
      </span>
    </div>
  </div>
  <div
    className="contentrenderer-content"
    style={
      Object {
        "left": 184,
        "width": "calc(100% - 184)",
      }
    }
  >
    <div
      className="contentrenderer-content-drag-indicator"
    />
    <div
      className="contentrenderer-content-markers"
    />
    <SignalDetections
      channelId="channel-id"
      disableModification={false}
      displayEndTimeSecs={700}
      displayStartTimeSecs={300}
      events={
        Object {
          "onChannelClick": [MockFunction],
          "onClickSelectionWindow": [MockFunction],
          "onContextMenu": [MockFunction],
          "onMaskClick": [MockFunction],
          "onMaskContextClick": [MockFunction],
          "onMaskCreateDragEnd": [MockFunction],
          "onMeasureWindowUpdated": [MockFunction],
          "onMoveSelectionWindow": [MockFunction],
          "onPredictivePhaseClick": [MockFunction],
          "onPredictivePhaseContextMenu": [MockFunction],
          "onPredictivePhaseDragEnd": [MockFunction],
          "onSignalDetectionClick": [MockFunction],
          "onSignalDetectionContextMenu": [MockFunction],
          "onSignalDetectionDragEnd": [MockFunction],
          "onUpdateMarker": [MockFunction],
          "onUpdateSelectionWindow": [MockFunction],
        }
      }
      getTimeSecsForClientX={[Function]}
      isDefaultChannel={true}
      positionDragIndicator={[Function]}
      selectedSignalDetections={Array []}
      signalDetections={Array []}
      stationId="station-id"
      toast={[MockFunction]}
      toggleDragIndicator={[Function]}
    />
    <PredictedPhases
      channelId="channel-id"
      disableModification={false}
      displayEndTimeSecs={700}
      displayStartTimeSecs={300}
      events={
        Object {
          "onChannelClick": [MockFunction],
          "onClickSelectionWindow": [MockFunction],
          "onContextMenu": [MockFunction],
          "onMaskClick": [MockFunction],
          "onMaskContextClick": [MockFunction],
          "onMaskCreateDragEnd": [MockFunction],
          "onMeasureWindowUpdated": [MockFunction],
          "onMoveSelectionWindow": [MockFunction],
          "onPredictivePhaseClick": [MockFunction],
          "onPredictivePhaseContextMenu": [MockFunction],
          "onPredictivePhaseDragEnd": [MockFunction],
          "onSignalDetectionClick": [MockFunction],
          "onSignalDetectionContextMenu": [MockFunction],
          "onSignalDetectionDragEnd": [MockFunction],
          "onUpdateMarker": [MockFunction],
          "onUpdateSelectionWindow": [MockFunction],
        }
      }
      getTimeSecsForClientX={[Function]}
      isDefaultChannel={true}
      positionDragIndicator={[Function]}
      predictedPhases={Array []}
      selectedPredictedPhases={Array []}
      stationId="station-id"
      toast={[MockFunction]}
      toggleDragIndicator={[Function]}
    />
    <TheoreticalPhases
      displayEndTimeSecs={700}
      displayStartTimeSecs={300}
      events={
        Object {
          "onChannelClick": [MockFunction],
          "onClickSelectionWindow": [MockFunction],
          "onContextMenu": [MockFunction],
          "onMaskClick": [MockFunction],
          "onMaskContextClick": [MockFunction],
          "onMaskCreateDragEnd": [MockFunction],
          "onMeasureWindowUpdated": [MockFunction],
          "onMoveSelectionWindow": [MockFunction],
          "onPredictivePhaseClick": [MockFunction],
          "onPredictivePhaseContextMenu": [MockFunction],
          "onPredictivePhaseDragEnd": [MockFunction],
          "onSignalDetectionClick": [MockFunction],
          "onSignalDetectionContextMenu": [MockFunction],
          "onSignalDetectionDragEnd": [MockFunction],
          "onUpdateMarker": [MockFunction],
          "onUpdateSelectionWindow": [MockFunction],
        }
      }
      getTimeSecsForClientX={[Function]}
      isDefaultChannel={true}
      positionDragIndicator={[Function]}
      stationId="station-id"
      theoreticalPhaseWindows={Array []}
      toast={[MockFunction]}
      toggleDragIndicator={[Function]}
    />
  </div>
</div>
`;
